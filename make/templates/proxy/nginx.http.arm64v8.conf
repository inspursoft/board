worker_processes auto;

events {
  worker_connections 1024;
  use epoll;
  multi_accept on;
}

http {
  tcp_nodelay on;
  include /etc/nginx/conf.d/*.upstream.conf;
  include /etc/nginx/mime.types;

  # this is necessary for us to be able to disable request buffering in all cases
  proxy_http_version 1.1;
  
  log_format timed_combined '$$remote_addr - '
    '"$$request" $$status $$body_bytes_sent '
    '"$$http_referer" "$$http_user_agent" '
    '$$request_time $$upstream_response_time $$pipe';

  access_log /dev/stdout timed_combined;

  include /etc/nginx/conf.d/*.server.conf;

  gzip on;
  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_buffers 16 8k;
  gzip_http_version 1.1;
  gzip_min_length 256;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

  # use docker embedded dns
  resolver 127.0.0.11 ipv6=off;

  server {
    listen 80;
    
    root /usr/share/nginx/html;
    
    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;
  
    # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
    chunked_transfer_encoding on;
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    add_header Content-Security-Policy "default-src 'self'; font-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' https data: base64; style-src 'self' 'unsafe-inline';";
    
    #set variables for dynamic dns resolve
    set $$apiserver "http://apiserver:8088";

    location / {
      try_files $$uri /index.html;
    }

    location /deploy/ {
      proxy_pass $$apiserver;
      proxy_set_header Host $$http_host;
      proxy_set_header X-Real-IP $$remote_addr;
      proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;

      proxy_set_header X-Forwarded-Proto $$scheme;
    }

    location /captcha/ {
      proxy_pass $$apiserver;
      proxy_set_header Host $$http_host;
      proxy_set_header X-Real-IP $$remote_addr;
      proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;

      proxy_set_header X-Forwarded-Proto $$scheme;
    }

    location /api/v1/ {
      proxy_connect_timeout       600;
      proxy_send_timeout          600;
      proxy_read_timeout          600;
      send_timeout                600;

      proxy_pass $$apiserver;
      proxy_set_header Host $$http_host;
      proxy_set_header X-Real-IP $$remote_addr;
      proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
      
      # When setting up Board behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
      proxy_set_header X-Forwarded-Proto $$scheme;

      # Add Secure flag when serving HTTPS
      # proxy_cookie_path / "/; secure";

      proxy_buffering off;
      proxy_request_buffering off;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $$http_upgrade;
      proxy_set_header Connection "upgrade";
      
    }
  }

  map $$http_upgrade $$connection_upgrade {
    default upgrade;
    ''      close;
  }

  server {
    listen 8080;

    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;

    # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
    chunked_transfer_encoding on;

    #set variables for dynamic dns resolve
    set $$apiserver "http://apiserver:8088/kubernetes";

    location / {
      proxy_connect_timeout       600;
      proxy_send_timeout          600;
      proxy_read_timeout          600;
      send_timeout                600;

      proxy_pass $$apiserver$$request_uri;
      proxy_set_header Host $$http_host;
      proxy_set_header X-Real-IP $$remote_addr;
      proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
      proxy_set_header Upgrade $$http_upgrade;
      proxy_set_header Connection $$connection_upgrade;
      proxy_set_header X-Forwarded-Proto $$scheme;

      # Add Secure flag when serving HTTPS
      proxy_cookie_path / "/; secure";

      proxy_buffering off;
      proxy_request_buffering off;
    }
  }
}
