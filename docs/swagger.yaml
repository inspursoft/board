# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: Board API
  description: These APIs provide services for manipulating Board project.
  version: "0.1.0"
# the domain of the service
host: localhost
# array of all schemes that your API supports
schemes:
  - http
basePath: /api
produces:
  - application/json
  - text/plain
consumes:
  - text/plain
  - application/json
paths:
  /v1/search:
    get:
      summary: Search in Board web site
      description: |
        The Search endpoint returns information about the projects, services,
        images, nodes, users offered at public status or accessible to the 
        current login user. The response includes the project, service, 
        image, node and user list in a proper display order.
      parameters:
        - name: q
          in: query
          description: Search parameter for project/service/image/node/user name.
          required: false
          type: string
        - name: token
          in: header
          type: string
          description: Current available token.
      tags:
        - Products
      responses:
        200:
          description: An array of search results.
          schema:
            type: array
            items:
              $ref: '#/definitions/Search'
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Unexpected internal errors.
  /v1/users:
    get:
      summary: Get registered users of Board. (need discuss)
      description: |
        This endpoint is for user to search registered users, support for filtering results with username. Notice, by now this operation is only for administrator.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: username
          in: query
          type: string
          required: false
          description: Username for filtering results.
        - name: page_index
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: page_size
          in: query
          type: integer
          format: int32
          required: false
          description: The size of per page, default is 10, maximum is 100.
        - name: order_field 
          in: query
          description: Order field for results.
          required: false
          type: string
        - name: order_asc 
          in: query
          description: Order ascent type for results.
          required: false
          type: integer
      tags:
        - Products
      responses:
        200:
          description: Searched for users of Board successfully.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserDetail'
          headers:
            X-Total-Count:
              description: The total count of users.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        400:
          description: Invalid user ID.
        401:
          description: User need to log in first.
        403:
          description: User does not have permission of admin role.
        500:
          description: Unexpected internal errors.
  /v1/sign-up:
    post:
      summary: Creates a new user account.
      description: |
        This endpoint is to create a user if the user does not already exist.
      parameters:
        - name: user
          in: body
          description: New created user.
          required: true
          schema:
            $ref: '#/definitions/UserDetail'
      tags:
        - Products
      responses:
        201:
          description: User created successfully.
        400:
          description: Unsatisfied with constraints of the user creation.
        403:
          description: User registration can only be used by admin role user when self-registration is off.
        500:
          description: Unexpected internal errors.
  /v1/adduser:
    post:
      summary: Add a new user account (This feature is only provided for system admin user).
      description: |
        This endpoint is to create a user if the user does not already exist  (This feature is only provided for system admin user).
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: user
          in: body
          description: New created user.
          required: true
          schema:
            $ref: '#/definitions/UserDetail'
      tags:
        - Products
      responses:
        201:
          description: User created successfully.
        400:
          description: Unsatisfied with constraints of the user creation.
        403:
          description: User registration can only be used by admin role user when self-registration is off.
        500:
          description: Unexpected internal errors.          
  /v1/sign-in:
    post:
      summary: Sign in with available user account.
      description: |
        Sign in system with available user account including username/email and password and get the token. 
      parameters:
        - name: user
          in: body
          description: Available user account.
          required: true
          schema:
            $ref: '#/definitions/UserSignIn'
      tags:
        - Products
      responses:
        200:
          description: User signed in successfully.
        400:
          description: Incorrect username or password.
        500:
          description: Unexpected internal error.
  /v1/log-out:
    get:
      summary: Log out session for current user account.
      description: |
        Log out system with available username. 
      parameters:
        - name: username
          in: query
          description: Available username.
          required: true
          type: string
      tags:
        - Products
      responses:
        200:
          description: User logged out successfully.
        400:
          description: Incorrect username.
        500:
          description: Unexpected internal error.
  /v1/systeminfo:
    get:
      summary: Get system info.
      description: |
        Get system info of current configurations. 
      tags:
        - Products
      responses:
        200:
          description: Get system info successfully.
          schema:
            $ref: '#/definitions/SystemInfo'
        500:
          description: Unexpected internal error. 
  /v1/kubernetesinfo:
    get:
      summary: Get kubernetes info.
      description: |
        Get kubernetes info of current configurations. 
      tags:
        - Products
      responses:
        200:
          description: Get kubernetes info successfully.
          schema:
            $ref: '#/definitions/KubernetesInfo'
        500:
          description: Unexpected internal error. 
  /v1/forgot-password:
    post:
      summary: Use registered username or email to receive a resetting URL from user's email inbox.
      description: |
        This endpoint is for user to reset his password by registered username or email.
      parameters:
        - name: credential
          in: query
          type: string
          required: true
          description: User's registered username or email.
      tags:
        - Products
      responses:
        200:
          description: Resetting password email sent successfully.
        404:
          description: Invalid credential or not found.
        412:
          description: Reset password doesn't support in external auth.
        500:
          description: Unexpected internal errors.
  /v1/reset-password:
    post:
      summary: Reset password with provided reset UUID.
      description: |
        This endpoint is for user to reset with provided reset UUID.
      parameters:
        - name: reset_uuid
          in: query
          type: string
          required: true
          description: Provided reset UUID from resetting password URL.
        - name: password
          in: query
          type: string
          required: true
          description: New reset password.
      tags:
        - Products
      responses:
        200:
          description: Reset password successfully.
        400:
          description: Invalid reset UUID.
        412:
          description: Reset password doesn't support in external auth.
        500:
          description: Unexpected internal errors.     
  /v1/users/{user_id}:
    get:
      summary: Get user by ID.
      description: |
        This endpoint is to get the current user infomation.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: user_id
          in: path
          type: integer
          format: int32
          required: true
          description: Registered user ID        
      tags:
        - Products
      responses:
        200:
          description: Get current user information successfully.
          schema:
            $ref: '#/definitions/UserDetail'
        401:
          description: User need to log in first.
    put:
      summary: Update a registered user to change his profile.
      description: |
       This endpoint let a registered user change his profile.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: user_id
          in: path
          type: integer
          format: int32
          required: true
          description: Registered user ID
        - name: user_profile
          in: body
          description: Only email, realname and comment can be modified.
          required: true
          schema:
            $ref: '#/definitions/UserProfileUpdate' 
      tags:
        - Products
      responses:
        200:
          description: Updated user's admin role successfully.
        400:
          description: Invalid user ID.
        401:
          description: User need to log in first.
        403:
          description: User does not have permission of admin role.
        404:
          description: User ID does not exist.
        500:
          description: Unexpected internal errors.
    delete:
      summary: Mark a registered user as be removed.
      description: |
        This endpoint let administrator of Board mark a registered user as
        be removed.It actually won't be deleted from DB.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: user_id
          in: path
          type: integer
          format: int32
          required: true
          description: User ID for marking as to be removed.
      tags:
        - Products
      responses:
        200:
          description: Marked user as be removed successfully.
        400:
          description: Invalid user ID.
        401:
          description: User need to log in first.
        403:
          description: User does not have permission of admin role.
        404:
          description: User ID does not exist.
        500:
          description: Unexpected internal errors.
  /v1/users/{user_id}/systemadmin:
    put:
      summary: Update a registered user to change to be an system administrator of Board.
      description: |
        This endpoint let a registered user change to be an system administrator
        of Board.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: user_id
          in: path
          type: integer
          format: int32
          required: true
          description: Registered user ID
        - name: user_system_admin
          in: body
          description:  Toggle a user to system admin or not.
          required: true
          schema:
            $ref: '#/definitions/UserSystemAdminUpdate'
      tags:
        - Products
      responses:
        200:
          description: Updated user's system admin role successfully.
        400:
          description: Invalid user ID.
        401:
          description: User need to log in first.
        403:
          description: User does not have permission of admin role.
        404:
          description: User ID does not exist.
        500:
          description: Unexpected internal errors.
  /v1/users/{user_id}/projectadmin:
    put:
      summary: Update a registered user to change to be an project administrator of Board.
      description: |
        This endpoint let a registered user change to be an project administrator
        of Board.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: user_id
          in: path
          type: integer
          format: int32
          required: true
          description: Registered user ID
        - name: user_project_admin
          in: body
          description:  Toggle a user to project admin or not.
          required: true
          schema:
            $ref: '#/definitions/UserProjectAdminUpdate'
      tags:
        - Products
      responses:
        200:
          description: Updated user's project admin role successfully.
        400:
          description: Invalid user ID.
        401:
          description: User need to log in first.
        403:
          description: User does not have permission of admin role.
        404:
          description: User ID does not exist.
        500:
          description: Unexpected internal errors.          
  /v1/users/{user_id}/password:
    put:
      summary: Change the password on a user that already exists.
      description: |
        This endpoint is for user to update password. Users with the admin role can change any user's password. Guest users can change only their own password.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: user_id
          in: path
          type: integer
          format: int32
          required: true
          description: Registered user ID.
        - name: user_password
          in: body
          description: Password to be updated.
          required: true
          schema:
            $ref: '#/definitions/UserPasswordUpdate'          
      tags:
        - Products
      responses:
        200:
          description: Updated password successfully.
        400:
          description: Invalid user ID; Old password is blank; New password is blank.
        401:
          description: Don't have authority to change password. Please check login status.
        403:
          description: Old password is not correct.
        500:
          description: Unexpected internal errors.
  /v1/users/changeaccount:
    put:
      summary: Change the current user account.
      description: |
        This endpoint is for current user to update account.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: user_profile
          in: body
          description: User account to be updated.
          required: true
          schema:
            $ref: '#/definitions/UserProfileUpdate'          
      tags:
        - Products
      responses:
        200:
          description: Updated user account successfully.
        400:
          description: Invalid user account input.
        401:
          description: Don't have authority to change password. Please check login status.
        500:
          description: Unexpected internal errors.          
  /v1/users/current:
    get:
      summary: Get current user.
      description: |
        This endpoint is for getting current user with available token.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
      tags:
        - Products
      responses:
        200:
          description: Updated user's project admin role successfully.
          schema:
            $ref: '#/definitions/TokenPayload'
        400:
          description: Invalid user ID.
        401:
          description: User need to log in first.
        403:
          description: User does not have permission of admin role.
        404:
          description: User ID does not exist.
        500:
          description: Unexpected internal errors.              
  /v1/projects:
    get:
      summary: Return projects created by Board.
      description: |
        This endpoint returns all projects created by Board, and can be filtered by project name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: Project name for filtering results.
          required: false
          type: string
        - name: project_public
          in: query
          description: Public public sign for filtering projects.
          required: false
          type: integer
          format: int32
        - name: page_index
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: page_size
          in: query
          type: integer
          format: int32
          required: false
          description: The size of per page, default is 10, maximum is 100.
        - name: order_field 
          in: query
          description: Order field for results.
          required: false
          type: string
        - name: order_asc 
          in: query
          description: Order ascent type for results.
          required: false
          type: integer
      tags:
        - Products
      responses:
        200:
          description: Return all matched projects.
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectDetail'
          headers:
            X-Total-Count:
              description: The total count of projects.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    post:
      summary: Create a new project.
      description: |
        This endpoint is for user to create a new project.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project
          in: body
          description: New created project.
          required: true
          schema:
            $ref: '#/definitions/ProjectDetail'
      tags:
        - Products
      responses:
        201:
          description: Project created successfully.
        400:
          description: Unsatisfied with constraints of the project creation.
        401:
          description: User need to log in first.
        409:
          description: Project name already exists.
        500:
          description: Unexpected internal errors.
  /v1/projects/{project_id}:
    get:
      summary: Return specific project detail infomation.
      description: |
        This endpoint returns specific project information by project ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_id
          in: path
          description: Project ID for filtering results.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Return matched project information.
          schema:
            $ref: '#/definitions/ProjectDetail'
        401:
          description: User need to log in first.
        500:
          description: Internal errors.     
    delete:
      summary: Delete project by projectID
      description: |
        This endpoint is aimed to delete project by project ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_id
          in: path
          description: Project ID of project which will be deleted.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Project is deleted successfully.
        400:
          description: Invalid project id.
        403:
          description: User need to log in first.
        404:
          description: Project does not exist.
        412:
          description: Project contains policies, can not be deleted.
        500:
          description: Internal errors.
  /v1/projects/{project_id}/publicity:
    put:
      summary: Update project publicity for a selected project.
      description: |
        This endpoint is aimed to toggle a project publicity status.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected project ID.
        - name: project
          in: body
          required: true 
          schema:
            $ref: '#/definitions/ProjectPublicityUpdate'
          description: Updates of project publicity.
      tags:
        - Products
      responses:
        200:
          description: Updated project publicity status successfully.
        400:
          description: Illegal format of provided ID value.
        401:
          description: User need to log in first.
        403:
          description: User does not have permission to the project.
        404:
          description: Project ID does not exist.
        500:
          description: Unexpected internal errors.
  /v1/projects/{project_id}/members:
    get:
      summary: Return a project's relevant members.
      description: |
        This endpoint is for user to search a specified project's relevant members.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_id
          in: path
          type: integer
          format: int32
          required: true
          description: Relevant project ID.
      tags:
        - Products
      responses:
        200:
          description: Get project's relevant role members successfully.
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectMemberDetail'
        400:
          description: Illegal format of provided ID value.
        401:
          description: User need to log in first.
        403:
          description: User in session does not have permission to the project.
        404:
          description: Project ID does not exist.
        500:
          description: Unexpected internal errors.
    post:
      summary: Add member accompany with relevant project.
      description: |
        This endpoint is for user to add member accompany with relevant project.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_id
          in: path
          type: integer
          format: int32
          required: true
          description: Relevant project ID.
        - name: project_member
          in: body
          required: true
          schema:
            $ref: '#/definitions/RoleBrief'
          description: Members list for adding to relevant project.
      tags:
        - Products
      responses:
        200:
          description: Members added to relevant project successfully.
        400:
          description: Illegal format of provided ID value.
        401:
          description: User need to log in first.
        403:
          description: User in session does not have permission to the project.
        404:
          description: Project ID or username does not exist.
        500:
          description: Unexpected internal errors.
  /v1/projects/{project_id}/members/{user_id}:
    delete:
      summary: Delete member accompany with relevant project.
      description: |
        This endpoint is for user to delete member accompany with relevant project.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_id
          in: path
          type: integer
          format: int32
          required: true
          description: Relevant project ID.
        - name: user_id
          in: path
          type: integer
          format: int32
          required: true
          description: Relevant user ID.
      tags:
        - Products
      responses:
        200:
          description: Members added to relevant project successfully.
        400:
          description: Illegal format of provided ID value.
        401:
          description: User need to log in first.
        403:
          description: User in session does not have permission to the project.
        404:
          description: Project ID or username does not exist.
        500:
          description: Unexpected internal errors.        
  /v1/services/exists:
    get:
      summary: Return the results whether does the service exist.
      description: 
        This endpoint returns the results whether does the service exist.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: Project name for filtering results.
          required: false
          type: string
        - name: service_name 
          in: query
          description: Service name for filtering results.
          required: false
          type: string
      tags:
        - Products
      responses:
        200:
          description: Return all matched services.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
  /v1/services/rollingupdate/session:
    get:
      summary: Return the results the service config.
      description: 
        This endpoint returns the results the service config.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: Project name.
          required: true
          type: string
        - name: service_name 
          in: query
          description: Service name.
          required: true
          type: string
      tags:
        - Products
      responses:
        200:
          description: Return service config.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    patch:
      summary: Return the results the rolling update service config.
      description: 
        This endpoint returns the results the rolling update service config.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: Project name.
          required: true
          type: string
        - name: service_name 
          in: query
          description: Service name.
          required: true
          type: string
        - name: session_affinity_flag 
          in: query
          description: Session affinity flag for service.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Return null.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
  /v1/services/rollingupdate/image:
    get:
      summary: Return the results the rolling update service config.
      description: 
        This endpoint returns the results the rolling update service config.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: Project name for filtering results.
          required: false
          type: string
        - name: service_name 
          in: query
          description: Service name for filtering results.
          required: false
          type: string
      tags:
        - Products
      responses:
        200:
          description: Return all matched services.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    post:
      summary: Return the results of rolling update service.
      description: 
        This endpoint returns the results of rolling update service.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: Project name for filtering results.
          required: false
          type: string
        - name: service_name 
          in: query
          description: Service name for filtering results.
          required: false
          type: string
        - name: image_list 
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/ImageList'
          description: Updates of imagelist data.
      tags:
        - Products
      responses:
        200:
          description: Return all matched services.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    patch:
      summary: Rolling update the images of the service.
      description: 
        This endpoint is to roll update the images of the service.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: Project name.
          required: true
          type: string
        - name: service_name 
          in: query
          description: Service name.
          required: true
          type: string
        - name: image_list 
          in: body
          description: Updates of imagelist data.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/ImageList'
      tags:
        - Products
      responses:
        200:
          description: Update service successfully.
        401:
          description: User need to log in first.
        409:
          description: The updated image list conflict.
        500:
          description: Internal errors.
  /v1/services/rollingupdate/nodegroup:
    get:
      summary: Return the results the rolling update service config.
      description: 
        This endpoint returns the results the rolling update service config.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: Project name for filtering results.
          required: false
          type: string
        - name: service_name 
          in: query
          description: Service name for filtering results.
          required: false
          type: string
      tags:
        - Products
      responses:
        200:
          description: Return all matched services.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    patch:
      summary: Rolling update the nodegroup of the service.
      description: 
        This endpoint is to roll update the nodegruop of the service.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: Project name.
          required: true
          type: string
        - name: service_name 
          in: query
          description: Service name.
          required: true
          type: string
        - name: node_selector 
          in: query
          description: nodegroup name.
          required: true
          type: string
      tags:
        - Products
      responses:
        200:
          description: Update service successfully.
        401:
          description: User need to log in first.
        409:
          description: The updated image list conflict.
        500:
          description: Internal errors.
  /v1/services:
    get:
      summary: Return services created by Board.
      description: |
        This endpoint returns all services created by Board, and can be filtered by project name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: service_name 
          in: query
          description: Service name for filtering results.
          required: false
          type: string
        - name: service_public
          in: query
          description: Service public sign for filtering projects.
          required: false
          type: integer
          format: int32
        - name: page_index
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: page_size
          in: query
          type: integer
          format: int32
          required: false
          description: The size of per page, default is 10, maximum is 100.
        - name: order_field 
          in: query
          description: Order field for results.
          required: false
          type: string
        - name: order_asc 
          in: query
          description: Order ascent type for results.
          required: false
          type: integer
      tags:
        - Products
      responses:
        200:
          description: Return all matched services.
          schema:
            type: array
            items:
              $ref: '#/definitions/ServiceDetail'
          headers:
            X-Total-Count:
              description: The total count of services.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    post: 
      summary: Create a new original service.
      description: |
        This endpoint is to create a new original service.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_project
          in: body
          required: true
          schema:
            $ref: '#/definitions/ServiceProject'
          description: The project info for this servcie.  
      tags:
        - Products
      responses:
        200:
          description: Return a new service id for service config. 
          schema:
            type: string
            description: the service id string.
        401:
          description: User need to log in first.
        500:
          description: Unexpected internal errors.
  /v1/services/{service_id}:
    get:
      summary: Return specific service_id detail infomation.
      description: |
        This endpoint returns specific service information by service_id ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          description: Service ID for filtering results.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Return matched service information.
          schema:
            $ref: '#/definitions/ServiceDetail'
        401:
          description: User need to log in first.
        500:
          description: Internal errors.  
    delete:
      summary: Delete the specific service by service_id.
      description: |
        This endpoint to delete the specific service by service_id ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          description: Service ID for deleting.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Delete the service successfully.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.  
  /v1/services/{service_id}/info:
    get:
      summary: Return specific service_name infomation.
      description: |
        This endpoint returns specific service information by service_name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
      tags:
        - Products
      responses:
        200:
          description: Return matched service information.
          schema:
            $ref: '#/definitions/ServiceDetail'
        401:
          description: User need to log in first.
        500:
          description: Internal errors.  
  /v1/images/dockerfile/upload:
    post:
      summary: Return upload status.
      description:
        This endpoint upload dockerfile.
      consumes:
        - multipart/form-data
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: query
          description: image name for filtering results.
          required: true
          type: integer
          format: string
        - name: tag_name
          in: query
          description: tag_name for filtering results.
          required: true
          type: integer
          format: string
        - name: project_name
          in: query
          description: project_name for filtering results.
          required: true
          type: integer
          format: string
        - name: upload_file
          in: formData
          type: file
          required: true
          description: File to be uploaded.
      tags:
        - Products
      responses:
        200:
          description: An array of search results.           
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Unexpected internal errors. 
  /v1/images/dockerfile/download:
    get:
      summary: Return download status.
      description: |
        This endpoint download dockfile.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: query
          description: image name for filtering results.
          required: true
          type: integer
          format: string
        - name: tag_name
          in: query
          description: tag_name for filtering results.
          required: true
          type: integer
          format: string
        - name: project_name
          in: query
          description: project_name for filtering results.
          required: true
          type: integer
          format: string
      tags:
        - Products
      responses:
        200:
          description: An array of search results.           
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Unexpected internal errors.         
  /v1/services/yaml/upload:
    post:
      summary: Return upload status.
      description:
        This endpoint upload yaml file.
      consumes:
        - multipart/form-data
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name
          in: query
          description: Project name.
          required: true
          type: string
        - name: deployment_file
          in: formData
          type: file
          required: true
          description: deployment yaml to be uploaded.
        - name: service_file
          in: formData
          type: file
          required: true
          description: service yaml to be uploaded.
      tags:
        - Products
      responses:  
        200:
          description: Upload files successfully return service id.     
          schema:
            description: The service id.  
            type: string     
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Unexpected internal errors. 
  /v1/services/yaml/download:
    get:
      summary: Return download status.
      description: 
        This endpoint download yaml file.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: service_name
          in: query
          description: Service name for filtering results.
          required: true
          type: integer
          format: string
        - name: project_name
          in: query
          description: project_name for filtering results.
          required: true
          type: integer
          format: string
        - name: yaml_type
          in: query
          description: service yaml file type for filtering results.
          required: true
          type: integer
          format: string
      tags:
        - Products
      responses:
        200:
          description: An array of search results.           
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Unexpected internal errors.
  /v1/services/{service_id}/status:
    get:
      summary: Return specific service status.
      description: |
        This endpoint returns specific service status by service_name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
      tags:
        - Products
      responses:
        200:
          description: Return matched service status.
          schema:
            $ref: '#/definitions/ServiceDetail'
        401:
          description: User need to log in first.
        500:
          description: Internal errors.    
  /v1/services/selectservices:
    get:
      summary: Return the available service list to be selected.
      description: |
        This endpoint returns the available service list to be selected.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: service_name
          in: query
          description: Service name for filtering results.
          required: true
          type: string
        - name: project_name 
          in: query
          description: project name for filtering results.
          required: true
          type: string
      tags:
        - Products
      responses:
        200:
          description: Return all selectable services.
          schema:
            type: array
            items:
              type: string
              description: The service name.  
        401:
          description: User need to log in first.
        500:
          description: Internal errors.       
  /v1/services/{service_id}/serviceconfig:
    get:  
      summary: Get service configuration data.
      description: |
        This endpoint is aimed to get service configuration data.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
      tags:
        - Products
      responses:
        200:
          description: Return service config data.
          schema:
            $ref: '#/definitions/ServiceConfig2'
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.
    put:  
      summary: Update service configuration data.
      description: |
        This endpoint is aimed to update service configuration data.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
        - name: serviceconfig
          in: body
          required: true 
          schema:
            $ref: '#/definitions/ServiceConfig2'
          description: Updates of ServiceConfig data.
      tags:
        - Products
      responses:
        200:
          description: Updated service config successfully.
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.
    delete:
      summary: Delete service configuration data.
      description: |
        This endpoint is aimed to delete service configuration data.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.  
      tags:
        - Products
      responses:
        200:
          description: Delete service config successfully.
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.
  /v1/services/{service_id}/test:  
    post:
      summary: Setup a test by this service configuration.
      description: |
        This endpoint is aimed to setup a test by this service configuration.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
        - name: serviceconfig
          in: body
          required: true 
          schema:
            $ref: '#/definitions/ServiceConfig'
          description: Updates of ServiceConfig data.
      tags:
        - Products
      responses:
        200:
          description: Service config test successfully.
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.
    delete: 
      summary: Cleanup the test resource.
      description: |
        This endpoint is aimed to cleanup the test environment.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
      tags:
        - Products
      responses:
        200:
          description: Cleanup the test resource successfully.
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.      
  /v1/services/config:
    post:
      summary: Deploy service by this service configuration.
      description: 
        This endpoint is aimed to deploy service by this service configuration.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: phase
          in: query
          type: string
          required: true
        - name: project_id
          in: query
          type: integer
          format: int64
          required: false 
        - name: service_name
          in: query
          type: string
          required: false
        - name: service_type
          in: query
          type: integer
          format: int64
          required: false           
        - name: cluster_ip
          in: query
          type: string
          required: false          
        - name: node_selector
          in: query
          type: string
          required: false
        - name: service_public
          in: query
          type: integer
          format: int
          required: false
        - name: instance
          in: query
          type: integer
          format: int
          required: false 
        - name: session_affinity_flag
          in: query
          type: integer
          format: int
          required: false 
        - name: session_affinity_time
          in: query
          type: integer
          format: int
          required: false 
        - name: service_config
          in: body
          required: false 
          schema:
            $ref: '#/definitions/EntireService'
          description: Updates of service config data.
      tags:
        - Products
      responses:
        200:
          description: Deploy service successfully, return serive brief.
          schema:
            $ref: '#/definitions/ServiceBrief'
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.
    get:
      summary: Return nodes in Board added by admin.
      description: |
        This endpoint returns all nodes in Board, and can be filtered by node name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: phase
          in: query
          type: string
          required: true
      tags:
        - Products
      responses:
        200:
          description: Return all matched nodes.
          schema:
            $ref: '#/definitions/EntireService'
          headers:
            X-Total-Count:
              description: The total count of nodes.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
  /v1/services/deployment:
    post:
      summary: Deploy service by this service configuration.
      description: |
        This endpoint is aimed to deploy service by this service configuration.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
      tags:
        - Products
      responses:
        200:
          description: Deploy service successfully, return serive brief.
          schema:
            $ref: '#/definitions/ServiceBrief'
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.
  /v1/services/{service_id}/deployment:
    post:
      summary: Deploy service by this service configuration.
      description: |
        This endpoint is aimed to deploy service by this service configuration.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
        - name: serviceconfig
          in: body
          required: true 
          schema:
            $ref: '#/definitions/ServiceConfig2'
          description: Updates of ServiceConfig2 data.
      tags:
        - Products
      responses:
        200:
          description: Deploy service successfully, return serive brief.
          schema:
            $ref: '#/definitions/ServiceBrief'
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.
    delete:
      summary: Delete service deployment configuration data.
      description: |
        This endpoint is aimed to delete service deployment configuration data.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.  
      tags:
        - Products
      responses:
        200:
          description: Delete service deployment config successfully.
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.
  /v1/services/statefulsets:
    post:
      summary: Deploy a statefulset service by this service configuration.
      description: |
        This endpoint is aimed to deploy a statefulset service by this service configuration.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
      tags:
        - Products
      responses:
        200:
          description: Deploy a statefulset service successfully, return serive brief.
          schema:
            $ref: '#/definitions/ServiceBrief'
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.        
  /v1/services/{service_id}/statefulsets:
    get:
      summary: Return specific service_name infomation.
      description: |
        This endpoint returns specific service information by service_name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
      tags:
        - Products
      responses:
        200:
          description: Return matched service information.
          schema:
            $ref: '#/definitions/ServiceDetail'
        401:
          description: User need to log in first.
        500:
          description: Internal errors.  
    delete:
      summary: Delete a statefulset service.
      description: |
        This endpoint is aimed to delete a statefulset service.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.  
      tags:
        - Products
      responses:
        200:
          description: Delete a statefulset service config successfully.
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.            
  /v1/services/{service_id}/toggle:
    put:  
      summary: Update the service to stop or run.
      description: |
        This endpoint is aimed to update service the service to stop or run.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
        - name: service_togglable
          in: body
          required: true 
          schema:
            $ref: '#/definitions/ServiceToggle'
          description: New running status of this service.
      tags:
        - Products
      responses:
        200:
          description: Toggle this service successfully.
        401:
          description: User need to log in first.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.    
  /v1/services/{service_id}/scale:
    get:  
      summary: Get service deployment scale info.
      description: |
        This endpoint is aimed to get service deployment scale info.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
      tags:
        - Products
      responses:
        200:
          description: Return deployment scale status.
          schema:
            $ref: '#/definitions/ServiceScaleStatus'
        401:
          description: User need to log in first.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.    
    put:  
      summary: Manually scale the service replica.
      description: |
        This endpoint is aimed to update the replica number of the service manually.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
        - name: service_scale
          in: body
          required: true 
          schema:
            $ref: '#/definitions/ServiceScale'
          description: New replica number to scale manually.
      tags:
        - Products
      responses:
        200:
          description: Manually scale this service successfully.
        401:
          description: User need to log in first.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.            
  /v1/services/{service_id}/autoscale:
    post:  
      summary: Create an auto scale info.
      description: |
        This endpoint is aimed to create an auto scale info.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
        - name: hpa
          in: body
          required: true 
          schema:
            $ref: '#/definitions/HPA'
          description: An auto-scale config data.
      tags:
        - Products
      responses:
        200:
          description: Return the auto scale hpa.
          schema:
            $ref: '#/definitions/HPA'
        401:
          description: User need to log in first.
        500:
          description: Unexpected internal errors.     
    get:  
      summary: Get the auto scale list of this service.
      description: |
        This endpoint is aimed to get the auto scale info.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
      tags:
        - Products
      responses:
        200:
          description: Return the auto scale hpa.
          schema:
            type: array
            items:
              $ref: '#/definitions/HPA'          
        401:
          description: User need to log in first.
        500:
          description: Unexpected internal errors.       
  /v1/services/{service_id}/autoscale/{hpa_id}:        
    delete:
      summary: Delete this autoscale hpa.
      description: |
        This endpoint is aimed to delete this autoscale hpa.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.      
        - name: hpa_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected hpa ID.            
      tags:
        - Products
      responses:
        200:
          description: Delete hpa config successfully.
        401:
          description: User need to log in first.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.          
    put:  
      summary: Update an auto scale info.
      description: |
        This endpoint is aimed to update an auto scale info.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
        - name: hpa_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected hpa ID.           
        - name: hpa
          in: body
          required: true 
          schema:
            $ref: '#/definitions/HPA'
          description: An auto-scale config data.
      tags:
        - Products
      responses:
        200:
          description: Return the updated auto scale hpa successfully.
          schema:
            $ref: '#/definitions/HPA'
        401:
          description: User need to log in first.
        500:
          description: Unexpected internal errors.          
    get:
      summary: Get this autoscale hpa current details.
      description: |
        This endpoint is aimed to get this autoscale hpa current details.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.      
        - name: hpa_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected hpa ID.              
      tags:
        - Products
      responses:
        200:
          description: Return the hpa current detailes successfully.
          schema:
            $ref: '#/definitions/HPADetail'          
        401:
          description: User need to log in first.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.                     
  /v1/services/{service_id}/locate:
    get:  
      summary: Get service deployment locate info.
      description: |
        This endpoint is aimed to get service deployment locate info.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
      tags:
        - Products
      responses:
        200:
          description: Return deployment locate status.
          schema:
            $ref: '#/definitions/ServiceLocate'
        401:
          description: User need to log in first.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.    
    put:  
      summary: Manually update the service locate.
      description: |
        This endpoint is aimed to update and locate the service manually.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
        - name: service_locate
          in: body
          required: true 
          schema:
            $ref: '#/definitions/ServiceLocate'
          description: New service node location to update manually.
      tags:
        - Products
      responses:
        200:
          description: Manually locate this service successfully.
        401:
          description: User need to log in first.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors. 
  /v1/services/{service_id}/publicity:
    put:  
      summary: Update service publicity for a selected service.
      description: |
        This endpoint is aimed to toggle a service publicity status.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: service_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected service ID.
        - name: service_publicity
          in: body
          required: true 
          schema:
            $ref: '#/definitions/ServicePublicityUpdate'
          description: New publicity status of this service.
      tags:
        - Products
      responses:
        200:
          description: Toggle this service successfully.
        401:
          description: User need to log in first.
        403:
          description: Invalid service ID.
        500:
          description: Unexpected internal errors.    
  /v1/services/nodeports:
    get:  
      summary: Get the existing nodeport list.
      description: |
        This endpoint is aimed to get the existing nodeport list.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: project name for service.
          required: false
          type: string
      tags:
        - Products
      responses:
        200:
          description: Return the existing nodeport list.
          schema:
            type: array
            items:
              type: integer
              format: int32
              description: The node port.           
        401:
          description: User need to log in first.
        403:
          description: Invalid project name.
        500:
          description: Unexpected internal errors.   
  /v1/services/import:
    get:  
      summary: Import the services from cluster.
      description: |
        This endpoint is aimed to import service from cluster.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
      tags:
        - Products
      responses:
        200:
          description: Return the existing nodeport list.       
        401:
          description: User need to log in first.
        500:
          description: Unexpected internal errors.                   
  /v1/services/ingress:
    get:  
      summary: Get the ingress module status.
      description: |
        This endpoint is aimed to get the ingress module status.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: project name for service.
          required: true
          type: string
      tags:
        - Products
      responses:
        200:
          description: Import services successfully.
        401:
          description: User need to log in first.
        403:
          description: Invalid project name.
        500:
          description: Unexpected internal errors.
  /v1/pvolumes:
    get:
      summary: Return all Persistent Volumes in Board.
      description: |
        This endpoint returns all Persistent Volumes in Board.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: pv_name 
          in: query
          description: pv name for filtering results.
          required: false
          type: string
        - name: pv_list_page
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: pv_list_page_size
          in: query
          type: integer
          format: int32
          required: false
          description: The size of per page, default is 10, maximum is 100.
      tags:
        - Products
      responses:
        200:
          description: Return all matched Persistent Volumes.
          schema:
            type: array
            items:
              $ref: '#/definitions/PersistentVolume'
          headers:
            X-Total-Count:
              description: The total count of Persistent Volumes.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    post:
      summary: Add a new PersistentVolume.
      description: |
        This endpoint is for admin to add a new PersistentVolume.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: pvolume
          in: body
          description: New added PersistentVolume.
          required: true
          schema:
            $ref: '#/definitions/PersistentVolume'
      tags:
        - Products
      responses:
        201:
          description: PersistentVolume added successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        409:
          description: PersistentVolume name already exists.
        500:
          description: Internal errors.      
  /v1/pvolumes/{pv_id}:    
    get:
      summary: Return a specific PersistentVolume detail infomation.
      description: |
        This endpoint returns a specific PersistentVolume information by pv ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: pv_id
          in: path
          description: PersistentVolume ID for filtering results.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Return matched PersistentVolume information.
          schema:
            $ref: '#/definitions/PersistentVolume'
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.        
    delete:
      summary: Delete a PersistentVolume by pv ID
      description: |
        This endpoint is aimed to remove a Persistent Volume by pv ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: pv_id
          in: path
          description: Node will be removed by pv_id.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Persistent Volume is deleted successfully.
        400:
          description: Invalid node id.
        403:
          description: User need to log in as admin.
        404:
          description: Node does not exist.
        500:
          description: Internal errors.         
    put:
      summary: Update Persistent Volume properties.
      description: |
       This endpoint is to update Persistent Volume.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: pv_id
          in: path
          type: integer
          format: int32
          required: true
          description: The Persistent Volume ID for node info changing.
        - name: pvolume
          in: body
          description: The Persistent Volume properties to be changed.
          required: true
          schema:
            $ref: '#/definitions/PersistentVolume' 
      tags:
        - Products
      responses:
        200:
          description: Updated PersistentVolume properties successfully.
        400:
          description: Invalid node ID.
        403:
          description: User need to log in as admin.
        500:
          description: Unexpected internal errors.     
  /v1/pvclaims:
    get:
      summary: Return all Persistent Volume Claims in Board.
      description: |
        This endpoint returns all Persistent Volume Claims in Board.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: pvc_name 
          in: query
          description: pvc name for filtering results.
          required: false
          type: string
        - name: pvc_list_page
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: pvc_list_page_size
          in: query
          type: integer
          format: int32
          required: false
          description: The size of per page, default is 10, maximum is 100.
      tags:
        - Products
      responses:
        200:
          description: Return all matched Persistent Volume Claims.
          schema:
            type: array
            items:
              $ref: '#/definitions/PersistentVolumeClaim'
          headers:
            X-Total-Count:
              description: The total count of Persistent Volume Claims.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    post:
      summary: Add a new PersistentVolume Claim.
      description: |
        This endpoint is for admin to add a new PersistentVolume Claim.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: pvclaim
          in: body
          description: New added PersistentVolume Claim.
          required: true
          schema:
            $ref: '#/definitions/PersistentVolumeClaim'
      tags:
        - Products
      responses:
        201:
          description: PersistentVolume Claim added successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        409:
          description: PersistentVolume Claim name already exists.
        500:
          description: Internal errors.      
  /v1/pvclaims/{pvc_id}:    
    get:
      summary: Return a specific PersistentVolume Claim detail infomation.
      description: |
        This endpoint returns a specific PersistentVolume Claim information by pv ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: pvc_id
          in: path
          description: PersistentVolume Claim ID for filtering results.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Return matched PersistentVolume Claim information.
          schema:
            $ref: '#/definitions/PersistentVolumeClaimDetail'
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.        
    delete:
      summary: Delete a PersistentVolume Claim by pvc ID
      description: |
        This endpoint is aimed to remove a Persistent Volume Claim by pvc ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: pvc_id
          in: path
          description: Node will be removed by pvc_id.
          required: true
          type: integer
          format: int32     
      tags:
        - Products
      responses:
        200:
          description: Persistent Volume Claim is deleted successfully.
        400:
          description: Invalid pvc id.
        403:
          description: User need to log in as admin.
        404:
          description: Node does not exist.
        500:
          description: Internal errors.         
    put:
      summary: Update Persistent Volume Claim properties.
      description: |
       This endpoint is to update Persistent Volume CLaim.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: pvc_id
          in: path
          type: integer
          format: int32
          required: true
          description: The Persistent Volume Claim ID for node info changing.
        - name: pvclaim
          in: body
          description: The Persistent Volume Claim properties to be changed.
          required: true
          schema:
            $ref: '#/definitions/PersistentVolumeClaim' 
      tags:
        - Products
      responses:
        200:
          description: Updated PersistentVolume Claim properties successfully.
        400:
          description: Invalid pvc ID.
        403:
          description: User need to log in as admin.
        500:
          description: Unexpected internal errors.  
  /v1/pvclaims/existing:   
    get:
      summary: Check the pvc name existing in this project.
      description: |
        This endpoint to check the pvc name existing in this project.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name
          in: query
          description: project name for filtering results.
          required: true
          type: string  
        - name: pvc_name
          in: query
          description: pvc name for filtering results.
          required: true
          type: string                 
      tags:
        - Products
      responses:
        200:
          description: PVC name don't existing.
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        409:
          description: PVC name already exists.          
        500:
          description: Internal errors.                   
  /v1/configmaps:
    get:
      summary: Return all ConfigMap in Board.
      description: |
        This endpoint returns all ConfigMaps in Board.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: project name for filtering results.
          required: false
          type: string
        - name: configmap_list_page
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: configmap_list_page_size
          in: query
          type: integer
          format: int32
          required: false
          description: The size of per page, default is 10, maximum is 100.
      tags:
        - Products
      responses:
        200:
          description: Return all matched ConfigMaps.
          schema:
            type: array
            items:
              $ref: '#/definitions/ConfigMap'
          headers:
            X-Total-Count:
              description: The total count of ConfigMaps.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    post:
      summary: Add a new ConfigMap.
      description: |
        This endpoint is for admin to add a new ConfigMap.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: configmap
          in: body
          description: New added ConfigMap.
          required: true
          schema:
            $ref: '#/definitions/ConfigMap'
      tags:
        - Products
      responses:
        201:
          description: ConfigMap added successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        409:
          description: ConfigMap name already exists.
        500:
          description: Internal errors.      
  /v1/configmaps/{configmapname}:    
    get:
      summary: Return a specific ConfigMap detail infomation.
      description: |
        This endpoint returns a specific ConfigMap information by name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: configmapname
          in: path
          description: ConfigMap name for filtering results.
          required: true
          type: string
        - name: project_name 
          in: query
          description: project name for filtering results.
          required: true
          type: string          
      tags:
        - Products
      responses:
        200:
          description: Return matched ConfigMap information.
          schema:
            $ref: '#/definitions/ConfigMap'
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.        
    delete:
      summary: Delete a ConfigMap by name
      description: |
        This endpoint is aimed to remove a ConfigMap by name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: configmapname
          in: path
          description: ConfigMap name for filtering results.
          required: true
          type: string
        - name: project_name 
          in: query
          description: project name for filtering results.
          required: true
          type: string    
      tags:
        - Products
      responses:
        200:
          description: ConfigMap is deleted successfully.
        400:
          description: Invalid ConfigMap name.
        403:
          description: User need to log in as admin.
        500:
          description: Internal errors.    
    put:
      summary: Update a ConfigMap by name
      description: |
        This endpoint is aimed to udpate a ConfigMap by name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: configmapname
          in: path
          description: ConfigMap name for filtering results.
          required: true
          type: string
        - name: configmap
          in: body
          description: New ConfigMap to be updated.
          required: true
          schema:
            $ref: '#/definitions/ConfigMap'      
      tags:
        - Products                
      responses:
        200:
          description: ConfigMap is updated successfully.
          schema:
            $ref: '#/definitions/ConfigMap'          
        400:
          description: Invalid ConfigMap name.
        403:
          description: User need to log in as admin.
        500:
          description: Internal errors.                                              
  /v1/node:
    get:
      summary: Return nodes in Board added by admin.
      description: |
        This endpoint returns all nodes in Board, and can be filtered by node name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: node_name 
          in: query
          description: node name for filtering results.
          required: false
          type: string
        - name: node_list_page
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: node_list_page_size
          in: query
          type: integer
          format: int32
          required: false
          description: The size of per page, default is 10, maximum is 100.
      tags:
        - Products
      responses:
        200:
          description: Return all matched nodes.
          schema:
            type: array
            items:
              $ref: '#/definitions/NodeDetail'
          headers:
            X-Total-Count:
              description: The total count of nodes.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    post:
      summary: Add a new node.
      description: |
        This endpoint is for admin to add a new node.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: node
          in: body
          description: New added node.
          required: true
          schema:
            $ref: '#/definitions/NodePropertyUpdate'
      tags:
        - Products
      responses:
        201:
          description: Node added successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        409:
          description: Node name already exists.
        500:
          description: Internal errors.
  /v1/node/{node_id}:
    get:
      summary: Return a specific node detail infomation.
      description: |
        This endpoint returns a specific node's information by node ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: node_id
          in: path
          description: Node ID for filtering results.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Return matched node information.
          schema:
            $ref: '#/definitions/NodeDetail'
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.
    delete:
      summary: Delete a node by node ID
      description: |
        This endpoint is aimed to remove a node by node ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: node_id
          in: path
          description: Node will be removed by node_id.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Node is deleted successfully.
        400:
          description: Invalid node id.
        403:
          description: User need to log in as admin.
        404:
          description: Node does not exist.
        500:
          description: Internal errors.
    put:
      summary: Update node properties.
      description: |
       This endpoint is to update node info.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: node_id
          in: path
          type: integer
          format: int32
          required: true
          description: The node ID for node info changing.
        - name: node_profile
          in: body
          description: The node properties to be changed.
          required: true
          schema:
            $ref: '#/definitions/NodePropertyUpdate' 
      tags:
        - Products
      responses:
        200:
          description: Updated node properties successfully.
        400:
          description: Invalid node ID.
        403:
          description: User need to log in as admin.
        500:
          description: Unexpected internal errors.
  /v1/node/{node_id}/runningstatus:
    put:
      summary: Start or stop the node
      description: |
        This endpoint is aimed to toggle a node's running status stop/start.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: node_id
          in: path
          type: integer
          format: int32
          required: true
          description: Node ID.
        - name: node_runningstatus
          in: body
          required: true
          schema:
            $ref: '#/definitions/NodeRunningstatusUpdate'
          description: The new running status of the node.         
      tags:
        - Products
      responses:
        200:
          description: Updated running status successfully.
        400:
          description: Invalid running status request.
        401:
          description: User need to log in as admin.
        500:
          description: Unexpected internal errors.  
  /v1/node/{node_id}/group:
    get:
      summary: Return the gorups that this node belongs to.
      description: |
        This endpoint returns the gorups that this node belongs to.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: node_id
          in: path
          type: integer
          format: int32
          required: true
          description: Node ID.
        - name: node_name 
          in: query
          description: node name for filtering results.
          required: true
          type: string
      tags:
        - Products
      responses:
        200:
          description: Return the gorups that this node belongs to.
          schema:
            type: array
            items:
              type: string
              description: The node group name.  
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    post:
      summary: Add this node to a node group.
      description: |
        This endpoint is aimed to add this node to a node group.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: node_id
          in: path
          type: integer
          format: int32
          required: true
          description: Node ID.
        - name: groupname
          in: query
          description: group name for this node to add
          required: true
          type: string       
        - name: node_name
          in: query
          description: nodename of this node
          required: true
          type: string  
      tags:
        - Products
      responses:
        200:
          description: add node to this gourp successfully.
        400:
          description: Invalid running status request.
        401:
          description: User need to log in as admin.
        500:
          description: Unexpected internal errors.  
    delete:
      summary: Remove this node from a node group.
      description: |
        This endpoint is aimed to remove this node from a node group.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: node_id
          in: path
          type: integer
          format: int32
          required: true
          description: Node ID.
        - name: groupname
          in: query
          description: group name for this node to remove
          required: true
          type: string       
        - name: node_name
          in: query
          description: nodename of this node
          required: true
          type: string  
      tags:
        - Products
      responses:
        200:
          description: remove this node from this gourp successfully.
        400:
          description: Invalid running status request.
        401:
          description: User need to log in as admin.
        500:
          description: Unexpected internal errors. 
  /v1/nodes/availableresources:
    get:
      summary: Return the system available resources of nodes.
      description: |
        This endpoint returns the system available resources of nodes.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
      tags:
        - Products
      responses:
        200:
          description: Return the system available resources of nodes.
          schema:
            type: array
            items:
              $ref: '#/definitions/NodeAvailableResources'              
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.          
  /v1/nodegroup:
    get:
      summary: Return all node groups in Board.
      description: |
        This endpoint returns all node groups in Board.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
      tags:
        - Products
      responses:
        200:
          description: Return all node groups.
          schema:
            type: array
            items:
              $ref: '#/definitions/NodeGroup'
          headers:
            X-Total-Count:
              description: The total count of nodegroups.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    post:
      summary: Add a new node group.
      description: |
        This endpoint is for admin to add a new node group.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: nodegroup
          in: body
          description: New added node group.
          required: true
          schema:
            $ref: '#/definitions/NodeGroup'
      tags:
        - Products
      responses:
        201:
          description: Node group added successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        409:
          description: Node group already exists.
        500:
          description: Internal errors.
    delete:
      summary: Remove this nodegroup.
      description: |
        This endpoint is aimed to remove this nodegroup.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: groupname
          in: query
          description: the group name to be removed
          required: true
          type: string       
      tags:
        - Products
      responses:
        200:
          description: remove this nodegroup successfully.
        400:
          description: Invalid running status request.
        401:
          description: User need to log in as admin.
        500:
          description: Unexpected internal errors. 
  /v1/nodegroup/existing:
    get:
      summary: Return result whether nodegruop existing.
      description: |
        This endpoint returns result whether nodegruop existing in Board.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: nodegroup_name
          in: query
          description: group name for new node gruop
          required: true
          type: string      
      tags:
        - Products
      responses:
        200:
          description: Nodegruop don't existing.
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
  /v1/nodegroup/{nodegroup_id}:
    delete:
      summary: Delete a node group by node gorup ID
      description: |
        This endpoint is aimed to remove a node group by node group ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: nodegroup_id
          in: path
          description: Node group will be removed by nodegroup_id.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Node group is deleted successfully.
        400:
          description: Invalid node group id.
        403:
          description: User need to log in as admin.
        404:
          description: Node group does not exist.
        500:
          description: Internal errors.
  /v1/images:
    get:
      summary: Return images in Board system.
      description: |
        This endpoint returns all images in Board, and can be filtered by image name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name 
          in: query
          description: image name for filtering results.
          required: false
          type: string
        - name: image_list_page
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: image_list_page_size
          in: query
          type: integer
          format: int32
          required: false
          description: The size of per page, default is 10, maximum is 100.
      tags:
        - Products
      responses:
        200:
          description: Return all matched images.
          schema:
            type: array
            items:
              $ref: '#/definitions/ImageBrief'
          headers:
            X-Total-Count:
              description: The total count of images.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        400:
          description: Bad Request
        500:
          description: Internal errors.
    post:
      summary: Create a new image
      description: |
        This endpoint is to create a new image with image_tag.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_config
          in: body
          required: true
          schema:
            $ref: '#/definitions/ImageConfig'
          description: The image configuration struct for the new image.       
      tags:
        - Products
      responses:
        200:
          description: Create Image configuration info successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.   
    delete:
      summary: Delete an image
      description: |
        This endpoint is to delete a image with image_name.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: query
          type: string
          required: true
          description: The image name which will be delete.       
      tags:
        - Products
      responses:
        200:
          description: Delete Image successfully.
        401:
          description: User need to log in as admin.
        404:
          description: Image name not found.
        500:
          description: Internal errors.   
  /v1/images/configclean:
    delete:
      summary: Delete this image configuration.
      description: |
        This endpoint is to delete this image configuration.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: query
          description: image name to specify an image.
          required: true
          type: string
        - name: image_tag
          in: query
          type: string
          required: true
          description: The tag of this image.
        - name: project_name
          in: query
          type: string
          required: true
          description: The project name that the image belongs to.     
      tags:
        - Products
      responses:
        200:
          description: Delete the image configuration info successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.
  /v1/images/preview:
    post:
      summary: Preview a new image for the image configuration
      description: |
        This endpoint is to return a new image dockerfile for the image configuration.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_config
          in: body
          required: true
          schema:
            $ref: '#/definitions/ImageConfig'
          description: The image configuration struct for the new image.       
      tags:
        - Products
      responses:
        200:
          description: Build the image successfully.
          schema:
            $ref: '#/definitions/ImageDockerfile'
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.
  /v1/images/building:          
    post:
      summary: Build a new image for the image configuration
      description: |
        This endpoint is to build a new image for the image configuration.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_config
          in: body
          required: true
          schema:
            $ref: '#/definitions/ImageConfig'
          description: The image configuration struct for the new image.       
      tags:
        - Products
      responses:
        200:
          description: Build the image successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.   
  /v1/images/imagepackage:          
    post:
      summary: push image package to registry used defined image name and tag
      description: |
        push image package to registry used defined image name and tag
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: query
          description: image name to specify an image.
          required: true
          type: string
        - name: image_tag
          in: query
          type: string
          required: true
          description: The tag of this image.
        - name: project_name
          in: query
          type: string
          required: true
          description: The project name that the image belongs to. 
        - name: image_package_name
          in: query
          type: string
          required: true
          description: The image package name.              
      tags:
        - Products
      responses:
        200:
          description: Push the image package to registry successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.  
  /v1/images/{image_name}/push:   
    post:
      summary: Upload the new image to board registry
      description: |
        This endpoint is to upload the new image to board registry.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: path
          description: image name to specify an image.
          required: true
          type: string
        - name: image_config
          in: body
          required: true
          schema:
            $ref: '#/definitions/ImageConfig'
          description: The image configuration struct for the new image.       
      tags:
        - Products
      responses:
        200:
          description: Upload the image to board registry successfully.
          schema:
            $ref: '#/definitions/ImageDetail'
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors. 
  /v1/images/{image_name}/fileupload:   
    post:
      summary: Upload the external archive to image building server
      description: |
        This endpoint is to upload the external archive to image building server.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: path
          description: image name to specify an image.
          required: true
          type: string
        - name: image_externalfile
          in: body
          required: true
          schema:
            $ref: '#/definitions/ImageExternalfile'
          description: The external archive to upload. 
      tags:
        - Products
      responses:
        200:
          description: Upload the external archive to image building server successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors. 
  /v1/images/dockerfile:
    get:
      summary: Return the dockerfile of this image.
      description: |
        This endpoint returns the dockerfile of this image.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: query
          description: image name to specify an image.
          required: true
          type: string
        - name: image_tag
          in: query
          type: string
          required: true
          description: The tag of this image.
        - name: project_name
          in: query
          type: string
          required: true
          description: The project name that the image belongs to.   
      tags:
        - Products
      responses:
        200:
          description: Return the dockerfile of this image successfully.
          schema:
            $ref: '#/definitions/ImageDockerfile'
        400:
          description: Bad Request.
        404:
          description: Image name does not exist.
        500:
          description: Internal errors.
  /v1/images/registry:
    get:
      summary: Return the registry address of this system.
      description: |
        This endpoint returns the registry address of this system.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
      tags:
        - Products
      responses:
        200:
          description: Return the registry address of this system.
          schema:
            description: The registry address.  
            type: string  
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.          
  /v1/images/dockerfilebuilding:
    post:
      summary: Build a new image based on a dockerfile.
      description: |
        This endpoint is to build a new image based on a dockerfile.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: query
          description: image name to specify an image.
          required: true
          type: string
        - name: image_tag
          in: query
          type: string
          required: true
          description: The tag of this image.
        - name: project_name
          in: query
          type: string
          required: true
          description: The project name that the image belongs to.   
      tags:
        - Products
      responses:
        200:
          description: Build the image successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.
  /v1/images/{image_name}:
    get:
      summary: Return all detailed info of this image.
      description: |
        This endpoint returns all detailed info of this image by the image internal serial number
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: path
          description: image name to specify an image.
          required: true
          type: string
        - name: tag_list_page
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: tag_list_page_size
          in: query
          type: integer
          format: int32
          required: false
          description: The size of per page, default is 10, maximum is 100.          
      tags:
        - Products
      responses:
        200:
          description: Return all tags matched this image.
          schema:
            type: array
            items:
              $ref: '#/definitions/ImageDetail'
          headers:
            X-Total-Count:
              description: The total count of image detail.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        400:
          description: Bad Request.
        404:
          description: Image serial number does not exist.
        500:
          description: Internal errors.
    delete:
      summary: Delete an image by image tag.
      description: |
        This endpoint is to delete an image by the image tag.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: path
          description: image name to specify an image.
          required: true
          type: string
        - name: image_tag
          in: query
          type: string
          required: true
          description: The image tag to be deleted       
      tags:
        - Products
      responses:
        200:
          description: The image of this tag is deleted successfully.
        401:
          description: User need to log in first.
        404:
          description: Invalid image name or tag.
        500:
          description: Internal errors.
  /v1/images/{image_name}/existing:
    get:
      summary: Return the existing of an image tag.
      description: |
        This endpoint checks the existing of an image tag.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: image_name
          in: path
          description: image name to specify an image.
          required: true
          type: string
        - name: image_tag
          in: query
          type: string
          required: true
          description: The image tag to be checked   
        - name: project_name
          in: query
          type: string
          required: true
          description: The project name that the image belongs to.             
      tags:
        - Products
      responses:
        200:
          description: The image tag not existing. 
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        409:
          description: The image tag existing.          
        500:
          description: Internal errors.
  /v1/profile:
    get:
      summary: Return the Board system profile information
      description: |
        This endpoint returns the Board system profile information.
      tags:
        - Products
      responses:
        200:
          description: Return profile information.
          schema:
            $ref: '#/definitions/ProfileDetail'
        400:
          description: Bad Request
        500:
          description: Internal errors.
  /v1/system:
    get:
      summary: Return the admin and system management info
      description: |
        This endpoint returns admin and system management info.
      tags:
        - Products
      responses:
        200:
          description: Return admin and system management info.
          schema:
            $ref: '#/definitions/System'
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Internal errors.    
  /v1/system/host_setting:
    put:
      summary: Update host info
      description: |
        This endpoint is to update host info.
      parameters:
        - name: host_setting
          in: body
          required: true
          schema:
            $ref: '#/definitions/HostInfo'
          description: The host's information to be updated.         
      tags:
        - Products
      responses:
        200:
          description: Updated host info successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Unexpected internal errors.     
  /v1/system/admin_setting:
    put:
      summary: Update admin account info
      description: |
        This endpoint is to update the admin account info.
      parameters:
        - name: admin_setting
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminAccount'
          description: The new admin account info.         
      tags:
        - Products
      responses:
        200:
          description: Updated admin account info successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Unexpected internal errors.     
  /v1/system/email_setting:
    put:
      summary: Update email server info
      description: |
        This endpoint is to update the email server info.
      parameters:
        - name: email_setting
          in: body
          required: true
          schema:
            $ref: '#/definitions/EmailServer'
          description: The new email server info.         
      tags:
        - Products
      responses:
        200:
          description: Updated email server info successfully.
        400:
          description: Bad Request.
        401:
          description: User need to log in as admin.
        500:
          description: Unexpected internal errors. 
  /v1/dashboard/service/:
    post:
      summary: Return the status logs of this service
      description: |
        This endpoint returns the status logs of this service.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: service_name
          in: query
          description: The integer ID of this service, null name is for the sum of all services.
          type: string
        - name: service_timestruct
          in: body
          required: true
          schema:
            $ref: '#/definitions/ServiceDashboardReq'
          description: The time struct for status logs of this servcie.       
      tags:
        - Products
      responses:
        200:
          description: Return the status logs of this service.
          schema:
            $ref: '#/definitions/DashboardService'
        400:
          description: Bad Request.
        401:
          description: Invalid service name.
        500:
          description: Internal errors.
  /v1/dashboard/node/:
    post:
      summary: Return the status logs of this node
      description: |
        This endpoint returns the status logs of this node.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: node_name
          in: query
          description: The integer ID of this node, null name is for the sum of all nodes.
          type: integer
          format: int32
        - name: node_timestruct
          in: body
          required: true
          schema:
            $ref: '#/definitions/NodeDashboardReq'
          description: The time struct for status logs of this node.
      tags:
        - Products
      responses:
        200:
          description: Return the status logs of this node.
          schema:
            $ref: '#/definitions/DashboardNode'
        400:
          description: Bad Request.
        401:
          description: Invalid node name.
        500:
          description: Internal errors.
  /v1/dashboard/storage/{storage_id}:
    get:
      summary: Return the status logs of this storage
      description: |
        This endpoint returns the status logs of this storage.
      parameters:
        - name: storage_id
          in: path
          description: The integer ID of this storage, 'null' is for the sum of all storages.
          required: true
          type: integer
          format: int32
        - name: storage_timestruct
          in: body
          required: true
          schema:
            $ref: '#/definitions/TimeStruct'
          description: The time struct for status logs of this storage.    
      tags:
        - Products
      responses:
        200:
          description: Return the status logs of this storage.
          schema:
            $ref: '#/definitions/DashboardStorage'
        400:
          description: Bad Request.
        401:
          description: Invalid storage name.
        500:
          description: Internal errors.
  /v1/files/upload:
    post:
      summary: Upload file to specified path.
      description: |
        This endpoint is used to upload file to specified path.
      consumes:
         - multipart/form-data
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: upload_file
          in: formData
          type: file
          required: true
          description: File to be uploaded.
        - name: project_name
          in: query
          type: string
          required: false
          description: Project name as partial of generated path.
        - name: service_id
          in: query
          type: integer
          format: int32
          required: false
          description: Service id as partial of generated path.
        - name: image_name
          in: query
          type: string
          required: true
          description: Image name as partial of generated path.
        - name: tag_name
          in: query
          type: string
          required: true
          description: Tag name as partial of generated path.
      tags:
        - Products
      responses:
        200:
          description: Sucessful uploaded file.
        400:
          description: Bad Request.
        401:
          description: Need to login first.
        500:
          description: Internal errors.
  /v1/files/download:
    get:
      summary: Download files uploaded from specified path.
      description: |
        This endpoint is used to download specified file uploaded from specified path.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: file_name
          in: query
          type: string
          required: false
          description: File name specified to download. If omit this option will download all files as attachment.
      tags:
        - Products
      responses:
        200:
          description: Download files.
          schema:
            $ref: '#/definitions/FileInfoObject'
        400:
          description: Bad Request.
        401:
          description: Need to login first.
        500:
          description: Internal errors.
  /v1/files/list:
    post:
      summary: List files uploaded from specified path.
      description: |
        This endpoint is used to list files uploaded from specified path.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name
          in: query
          type: string
          required: false
          description: Project name as partial of generated path.
        - name: service_id
          in: query
          type: integer
          format: int32
          required: false
          description: Service id as partial of generated path.
        - name: image_name
          in: query
          type: string
          required: true
          description: Image name as partial of generated path.
        - name: tag_name
          in: query
          type: string
          required: true
          description: Tag name as partial of generated path.
      tags:
        - Products
      responses:
        200:
          description: Return the list of uploaded files.
          schema:
            $ref: '#/definitions/FileInfoObject'
        400:
          description: Bad Request.
        401:
          description: Need to login first.
        500:
          description: Internal errors.
  /v1/files/remove:
    post:
      summary: Remove uploaded file with specified path.
      description: |
        This endpoint is used to remove file with specified path.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name
          in: query
          type: string
          required: false
          description: Project name as partial of generated path.
        - name: service_id
          in: query
          type: integer
          format: int32
          required: false
          description: Service id as partial of generated path.
        - name: image_name
          in: query
          type: string
          required: true
          description: Image name as partial of generated path.
        - name: tag_name
          in: query
          type: string
          required: true
          description: Tag name as partial of generated path.
        - name: file_name
          in: query
          type: string
          required: true
          description: File name to be deleted.
      tags:
        - Products
      responses:
        200:
          description: Successful deleted file.
        400:
          description: Bad Request.
        401:
          description: Need to login first.
        500:
          description: Internal errors.
  /v1/jenkins-job/console:
    get:
      summary: Redirect Jenkins' job output.
      description: |
        This endpoint is used to redirect Jenkins' job output by specifying job name and build serial ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: job_name
          in: query
          type: string
          required: true
          description: Specify job name to fetch console output.
        - name: build_serial_id
          in: query
          type: string
          required: false
          description: This value would be either 'lastBuild' by default or as user specified build number. 
      tags:
        - Products
      responses:
        200:
          description: Successful get console output from Jenkins.
        400:
          description: Bad request.
        401:
          description: Need to login first.
        500:
          description: Internal errors.
  /v1/yamlconfig:
    post:
      summary: Create an object by posting a yaml config.
      description: |
        This endpoint is used to create an object by posting a yaml config.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: yaml_path
          in: query
          type: string
          required: true
          description: Specify the yaml config file path.
      tags:
        - Products
      responses:
        200:
          description: Successful create an object by posting a yaml config.
        400:
          description: Bad request.
        401:
          description: Need to admin login first.
        500:
          description: Internal errors.
    put:
      summary: Change an object by applying a yaml config.
      description: |
        This endpoint is change an object by applying a yaml config.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: yaml_path
          in: query
          type: string
          required: true
          description: Specify the yaml config file path.
      tags:
        - Products
      responses:
        200:
          description: Successful changed an object by applying a yaml config.
        400:
          description: Bad request.
        401:
          description: Need to admin login first.
        500:
          description: Internal errors.
    delete:
      summary: Delete an object by a yaml config.
      description: |
        This endpoint is delete an object by a yaml config.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: yaml_path
          in: query
          type: string
          required: true
          description: Specify the yaml config file path.
      tags:
        - Products
      responses:
        200:
          description: Successful delete an object by a yaml config.
        400:
          description: Bad request.
        401:
          description: Need to admin login first.
        500:
          description: Internal errors.
  /v1/email/ping:
    post:
      summary: Test connection and authentication with email server.
      description: |
        Test connection and authentication with email server. 
      parameters:
        - name: settings
          in: body
          description: 
            Email server settings, will be read from board.cfg.
          required: false
          schema:
            $ref: '#/definitions/EmailServerSetting'
      tags:
        - Products
      responses:
        '200':
          description: Ping email server successfully.
        '400':
          description: Inviald email server settings.
        '401':
          description: User need to login first.
        '403':
          description: Only admin has this authority.
        '415':
          $ref: '#/responses/UnsupportedMediaType'
        '500':
          description: Unexpected internal errors.
  /v1/operations:
    get:
      summary: Return operation records created by Board.
      description: |
        This endpoint returns all operation records created by Board.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: operation_object 
          in: query
          description: Operation object name for filtering results.
          required: false
          type: string
        - name: operation_action
          in: query
          description: Operation action for filtering results.
          required: false
          type: string
        - name: operation_user 
          in: query
          description: Operation user name for filtering results.
          required: false
          type: string
        - name: operation_status 
          in: query
          description: Operation status for filtering results.
          required: false
          type: string
        - name: operation_fromdate 
          in: query
          description: Operation time for beginning filtering.
          required: false
          type: string       
        - name: operation_todate 
          in: query
          description: Operation time for ending filtering.
          required: false
          type: string     
        - name: page_index
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: page_size
          in: query
          type: integer
          format: int32
          required: false
          description: The size of per page, default is 10, maximum is 100.
        - name: order_field 
          in: query
          description: Order field for results.
          required: false
          type: string
        - name: order_asc 
          in: query
          description: Order ascent type for results.
          required: false
          type: integer
      tags:
        - Products
      responses:
        200:
          description: Return all matched projects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Operation'
          headers:
            X-Total-Count:
              description: The total count of projects.
              type: integer
            Link:
              description: Link refers to the previous page and next page.
              type: string
        401:
          description: User need to log in first.
        500:
          description: Internal errors.    
    post:
      summary: Create an operation record.
      description: |
        This endpoint is to create an operation record for audit. 
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: operation
          in: body
          description: New created operation record.
          required: true
          schema:
            $ref: '#/definitions/Operation'
      tags:
        - Products
      responses:
        201:
          description: Operation record created successfully.
          schema:
            description: The operation record ID.  
            type: string              
        400:
          description: Unsatisfied with constraints of the operation creation.
        401:
          description: User need to log in first.
        500:
          description: Unexpected internal errors.
  /v1/operations/{operation_id}:
    get:
      summary: Return specific operation detail infomation.
      description: |
        This endpoint returns specific operation information by operation ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: operation_id
          in: path
          description: Operation ID for filtering results.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Return matched operation information.
          schema:
            $ref: '#/definitions/Operation'
        401:
          description: User need to log in first.
        500:
          description: Internal errors.  
    delete:
      summary: Delete operation record by operation ID
      description: |
        This endpoint is aimed to delete operation by operation ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: operation_id
          in: path
          description: Operation ID of operation which will be deleted.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Operation is deleted successfully.
        400:
          description: Invalid operation id.
        403:
          description: User need to log in first.
        404:
          description: Operation does not exist.
        412:
          description: Operation contains policies, can not be deleted.
        500:
          description: Internal errors.
    put:
      summary: Update an operation record.
      description: |
        This endpoint is to update an operation record for audit. 
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: operation_id
          in: path
          description: Operation ID of operation which will be deleted.
          required: true
          type: integer
          format: int32
        - name: operation
          in: body
          description: New operation content to be updated.
          required: true
          schema:
            $ref: '#/definitions/Operation'
      tags:
        - Products
      responses:
        200:
          description: Updated operation successfully.
        400:
          description: Illegal format of provided ID value.
        401:
          description: User need to log in first.
        403:
          description: User does not have permission to the operation.
        404:
          description: Operation ID does not exist.
        500:
          description: Unexpected internal errors.
  /v1/helm/repositories:
    get:
      summary: Get all repositories
      description: |
        This endpoint is to get all repositories
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
      tags:
        - Products
      responses:
        200:
          description: Return all matched repositories.
          schema:
            type: array
            items:
              $ref: '#/definitions/HelmRepository'
        401:
          description: User need to log in first.
        500:
          description: Unexpected internal errors.
  /v1/helm/repositories/{repository_id}:
    get:
      summary: Return specific repository detail infomation.
      description: |
        This endpoint returns specific repository detail information by repository ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: repository_id
          in: path
          description: Repository ID for filtering results.
          required: true
          type: integer
          format: int32
        - name: page_index
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: page_size
          in: query
          type: integer
          format: int32
          required: false
      tags:
        - Products
      responses:
        200:
          description: Return matched repository detail information.
          schema:
            $ref: '#/definitions/PaginatedHelmRepositoryDetail'
        401:
          description: User need to log in first.
        404:
          description: Repository does not exist.
        500:
          description: Internal errors.
  /v1/helm/repositories/{repository_id}/chartupload:
    post:
      summary: Upload specific helm chart
      description: |
        This endpoint is to upload specific helm chart into chart repository.
      consumes:
         - multipart/form-data        
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: repository_id
          in: path
          description: Repository ID for uploading.
          required: true
          type: integer
          format: int32
        - name: upload_file
          in: formData
          type: file
          required: true
          description: Chart to be uploaded.
      tags:
        - Products
      responses:
        201:
          description: Chart uploaded successfully.
        401:
          description: User need to log in first.
        500:
          description: Unexpected internal errors.
  /v1/helm/repositories/{repository_id}/charts/{chartname}/{chartversion}:
    get:
      summary: Return specific repository chart infomation.
      description: |
        This endpoint returns specific repository chart information by repository ID, chart name and chart version.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: repository_id
          in: path
          description: Repository ID for filtering results.
          required: true
          type: integer
          format: int32
        - name: chartname
          in: path
          description: Chart Name for filtering results.
          required: true
          type: string
        - name: chartversion
          in: path
          description: Chart Version for filtering results.
          required: true
          type: string
      tags:
        - Products
      responses:
        200:
          description: Return matched repository chart information.
          schema:
            $ref: '#/definitions/Chart'
        401:
          description: User need to log in first.
        404:
          description: Repository does not exist.
        500:
          description: Internal errors.
    delete:
      summary: Delete specific repository chart.
      description: |
        This endpoint delete specific repository chart by repository ID, chart name and chart version.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: repository_id
          in: path
          description: Repository ID for filtering results.
          required: true
          type: integer
          format: int32
        - name: chartname
          in: path
          description: Chart Name for filtering results.
          required: true
          type: string
        - name: chartversion
          in: path
          description: Chart Version for filtering results.
          required: true
          type: string
      tags:
        - Products
      responses:
        201:
          description: Chart deleted successfully.
        401:
          description: User need to log in first.
        404:
          description: Repository does not exist.
        500:
          description: Internal errors.
  /v1/helm/release/existing:   
    get:
      summary: Check the release name existing in this project.
      description: |
        This endpoint to check the release name existing in this project.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: release_name
          in: query
          description: release name for check.
          required: true
          type: string              
      tags:
        - Products
      responses:
        200:
          description: Release name don't existing.
        400:
          description: Bad Request.
        401:
          description: User need to log in first.
        409:
          description: Release name already exists.          
        500:
          description: Internal errors.  
  /v1/helm/release:
    post:
      summary: Install specific repository chart
      description: |
        This endpoint is to install specific repository chart into board.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: release
          in: body
          description: Release information to create.
          required: true
          schema:
            $ref: '#/definitions/Release'
      tags:
        - Products
      responses:
        201:
          description: Chart installed successfully.
        409:
          description: The repository name has already exist.
        401:
          description: User need to log in first.
        500:
          description: Unexpected internal errors.
    get:
      summary: Return specific release infomation.
      description: |
        This endpoint returns release information.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
      tags:
        - Products
      responses:
        200:
          description: Return matched release information.
          schema:
            type: array
            items:
              $ref: '#/definitions/Release'
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
  /v1/helm/release/{id}:
    get:
      summary: Return specific release infomation.
      description: |
        This endpoint returns release information.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: id
          in: path
          description: Release ID of release which will be deleted.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Return matched release information.
          schema:
            $ref: '#/definitions/ReleaseDetail'
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
    delete:
      summary: Delete release by release ID
      description: |
        This endpoint is aimed to delete release by release ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: id
          in: path
          description: Release ID of release which will be deleted.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Operation is deleted successfully.
        400:
          description: Invalid operation id.
        403:
          description: User need to log in first.
        404:
          description: Release does not exist.
        500:
          description: Internal errors.
  /v1/jobs:
    get:
      summary: Get jobs infomation.
      description: |
        This endpoint returns jobs information.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: job_name 
          in: query
          description: Job name for filtering results.
          required: false
          type: string
        - name: page_index
          in: query
          type: integer
          format: int32
          required: false
          description: The page nubmer, default is 1.
        - name: page_size
          in: query
          type: integer
          format: int32
          required: false
          description: The size of per page, default is 10, maximum is 100.
        - name: order_field 
          in: query
          description: Order field for results.
          required: false
          type: string
        - name: order_asc 
          in: query
          description: Order ascent type for results.
          required: false
          type: integer
      tags:
        - Products
      responses:
        200:
          description: Return matched release information.
          schema:
            type: array
            items:
              $ref: '#/definitions/JobDetail'
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
  /v1/jobs/deployment:
    post:
      summary: Deploy Job by this job configuration.
      description: |
        This endpoint is aimed to deploy job by this job configuration.
      parameters:
        - name: token
          in: query
          type: string
          required: true
          description: Current available token.
        - name: job_config
          in: body
          required: true 
          schema:
            $ref: '#/definitions/JobConfig'
          description: Updates of JobConfig data.
      tags:
        - Products
      responses:
        200:
          description: Deploy job successfully, return job config.
          schema:
            $ref: '#/definitions/JobConfig'
        401:
          description: User need to log in first.
        402:
          description: Invalid configuration phase.
        403:
          description: Invalid job ID.
        500:
          description: Unexpected internal errors.
  /v1/jobs/{job_id}:
    delete:
      summary: Delete the specific job by service_id.
      description: |
        This endpoint to delete the specific job by job_id ID.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: job_id
          in: path
          description: job ID for deleting.
          required: true
          type: integer
          format: int32
      tags:
        - Products
      responses:
        200:
          description: Delete the service successfully.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.  
  /v1/jobs/{job_id}/status:
    get:
      summary: Return specific job status.
      description: |
        This endpoint returns specific job status by job_id.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: job_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected job ID.
      tags:
        - Products
      responses:
        200:
          description: Return matched job status.
          schema:
            $ref: '#/definitions/JobDetail'
        401:
          description: User need to log in first.
        500:
          description: Internal errors. 
  /v1/jobs/exists:
    get:
      summary: Return the results whether does the job exist.
      description: 
        This endpoint returns the results whether does the job exist.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: Project name for filtering results.
          required: false
          type: string
        - name: job_name 
          in: query
          description: Job name for filtering results.
          required: false
          type: string
      tags:
        - Products
      responses:
        200:
          description: Return all matched jobs.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
  /v1/jobs/{job_id}/pods:
    get:
      summary: Return specific job relate pods.
      description: |
        This endpoint returns specific job relate pods by job_id.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: job_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected job ID.
      tags:
        - Products
      responses:
        200:
          description: Return matched job status.
        401:
          description: User need to log in first.
        500:
          description: Internal errors.
  /v1/jobs/{job_id}/logs/{pod_name}:
    get:
      summary: Return specific job relate pods.
      description: |
        This endpoint returns specific job relate pods by job_id.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: job_id
          in: path
          type: integer
          format: int32
          required: true
          description: Selected job ID.
        - name: pod_name
          in: path
          type: string
          required: true
          description: Selected pod Name.
        - name: container 
          in: query
          description: The container name of this pod to logs.
          required: false
          type: string
        - name: follow 
          in: query
          description: Whether follow the logs or not.
          required: false
          type: boolean
        - name: previous 
          in: query
          description: Whether show previous container logs.
          required: false
          type: boolean
        - name: since_seconds 
          in: query
          description: The start seconds of logs.
          required: false
          type: integer
          format: int64
        - name: since_time 
          in: query
          description: The start time of logs.
          required: false
          type: string
        - name: timestamps 
          in: query
          description: Whether show the timestamps in logs.
          required: false
          type: boolean
        - name: tail_lines 
          in: query
          description: The tail lines of logs.
          required: false
          type: integer
          format: int64
        - name: limit_bytes 
          in: query
          description: The limit size in bytes of logs.
          required: false
          type: integer
          format: int64
      tags:
        - Products
      responses:
        200:
          description: Return matched job status.
          schema:
            type: array
            items:
              $ref: '#/definitions/Pod'
        401:
          description: User need to log in first.
        500:
          description: Internal errors. 
  /v1/jobs/selectjobs:
    get:
      summary: Return the available job list to be selected.
      description: |
        This endpoint returns the available job list to be selected.
      parameters:
        - name: token
          in: header
          type: string
          required: true
          description: Current available token.
        - name: project_name 
          in: query
          description: project name for filtering results.
          required: true
          type: string
      tags:
        - Products
      responses:
        200:
          description: Return all selectable job.
          schema:
            type: array
            items:
              type: string
              description: The job name.  
        401:
          description: User need to log in first.
        500:
          description: Internal errors.  
responses:
  UnsupportedMediaType: 
    description: The Media Type of the request is not supported, it has to be "application/json"
# The following is for structure definition          
definitions:
  Search:
    type: object
    properties:
      project_result:
        description: Search results of the projects that matched the filter keywords.
        type: array
        items:
          $ref: '#/definitions/ProjectSearch'
      user_result:
        description: Search results of the services that matched the filter keywords.
        type: array
        items:
          $ref: '#/definitions/UserSearch'
      images_result:
        description: Search results of the services that matched the filter keywords.
        type: array
        items:
          $ref: '#/definitions/ImagesResult'
      node_result:
        description: Search results of the services that matched the filter keywords.
        type: array
        items:
          $ref: '#/definitions/NodeResult'
      service_result:
        description: Search results of the services that matched the filter keywords.
        type: array
        items:
          $ref: '#/definitions/ServiceResult'
  UserSearch:
      type: object
      properties:
        user_name:
          type: string
        role_name:
          type: string
        user_email:
          type: string
  ProjectSearch:
        type: object
        properties:
          owner_name:
            type: string
          project_name:
            type: string
          is_public:
            type: boolean
  ImagesResult:
      type: object
      properties:
          image_name:
              type: string
          project_name:
              type: string
  NodeResult:
      type: object
      properties:
          node_name:
              type: string
          node_ip:
              type: string
  ServiceResult:
      type: object
      properties:
          service_name:
              type: string
          project_name:
              type: string
  TokenPayload:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: The ID of current user.
      username:
        type: string
        description: The name of current user.
      email:
        type: string
        description: The email of current user.
      realname:
        type: string
        description: The realname of current user.
      is_project_admin:
        type: integer
        format: int32
        description: The project admin status of current user.
      is_system_admin:
        type: integer
        format: int32
        description: The system admin status of current user.
      token:
        type: string
        description: The token of current user.
  UserSignIn:
    type: object
    properties:
      user_name:
        type: string
        description: The name of user.
      user_password:
        type: string
        description: The password of user.
  UserBrief:
    type: object
    properties:
      user_id:
        type: integer
        format: int32
        description: The integer ID of this user.         
      user_name:
        type: string
        description: The name of this user.
      user_email:
        type: string
        description: The email address of this user.
      user_registertime:
        type: string
        description: The registration time of this user.
      user_systemadmin:
        type: integer 
        format: int32
        description: The flag to indicate the role, 1 for is_admin, 0 for not_admin.
      user_projectadmin:
        type: integer 
        format: int32
        description: The flag to indicate the role, 1 for is_projectowner, 0 for not_projectowner.
  UserDetail:
    type: object
    properties:
      user_id:
        type: integer
        format: int32
        description: The integer ID of this user.
      user_name:
        type: string
      user_email:
        type: string
      user_password:
        type: string
      user_realname:
        type: string
      user_comment:
        type: string
      user_deleted:
        type: integer
        format: int32
      user_system_admin:
        type: integer 
        format: int32
        description: The flag to indicate the role, 1 for system admin, 0 for not project admin
      user_project_admin:
        type: integer 
        format: int32
        description: The flag to indicate the role, 1 for project admin, 0 for not project admin
      user_reset_uuid:
        type: string
      user_salt:
        type: string
      user_creation_time:
        type: string
      user_update_time:
        type: string
  UserPasswordUpdate:
    type: object
    properties:
      user_password_old:
        type: string
        description: The user's existing password.
      user_password_new:
        type: string
        description: New password for marking as to be updated.
  UserProfileUpdate:
    type: object
    properties:
      user_email:
        type: string
        description: The new email of this user.
      user_realname:
        type: string
        description: The new realname of this user.
      user_comment:
        type: string
        description: The new comment of this user.
  UserSystemAdminUpdate:
    type: object
    properties:
      user_system_admin: 
        type: integer
        description: 1-has system admin, 0-not.
  UserProjectAdminUpdate:
    type: object
    properties:
      user_project_admin: 
        type: integer
        description: 1-has project admin, 0-not.
  ProjectBrief:
    type: object
    properties:
      project_id: 
        type: integer
        format: int32
        description: The integer ID of this project.
      project_name: 
        type: string
        description: The name of this project.
      project_owner:
        type: string
        description: The owner name of this project.
      project_creationtime:
        type: string
        description: The creation time of this project.
      project_public:
        type: integer 
        format: int32
        description: The flag to indicate the publicity of the project (1 is public, 0 is non-public)
  ProjectDetail:
    type: object
    properties:
      project_id:
        type: integer
        format: int32
        description: The integer ID of this project.
      project_name:
        type: string
        description: The name of this project.
      project_comment:
        type: string
        description: The commnet of this project.
      project_creation_time:
        type: string
        description: The creation time of the project.
      project_update_time:
        type: string
        description: The update time of the project.
      project_deleted:
        type: integer
        format: int32
        description: A deletion mark of the project (1 means it's deleted, 0 is not).
      project_owner_id:
        type: integer
        format: int32
        description: The owner ID of the project always means the creator of the project.
      project_owner_name:
        type: string
        description: The owner name of the project.
      project_public:
        type: integer
        format: int32
        description: The public status of the project.
      project_togglable:
        type: boolean
        description: Correspond to the UI about whether the project's publicity is  updatable (for UI)
      project_current_user_role_id:
        type: integer
        description: The role ID of the current user who triggered the API (for UI)
      project_service_count:
        type: integer
        description: The number of the services under this project.
  ProjectPropertyUpdate:
    type: object
    properties:
      project_name:
        type: string
        description: The new name of this project.
      project_comment:
        type: string
        description: The new comment of this project.
  ProjectPublicityUpdate:
    type: object
    properties:
      project_public: 
        type: integer
        description: 1-public, 0-not.
  ProjectMemberDetail:
    type: object
    properties:
      project_member_id:
        type: integer
        format: int32
        description: Project member ID.
      project_member_user_id:
        type: integer
        format: int32
        description: Project member user ID.
      project_member_username:
        type: string
        description: Project member username.
      project_member_project_id:
        type: integer
        format: int32
        description: Project member relevant project ID.
      project_member_role_id:
        type: integer
        format: int32
        description: Project member relevant project role ID.
  RoleBrief:
    type: object
    properties:
      project_member_role_id:
        type: integer
        description: 1-system admin, 2-project admin, 3-developer, 4-visitor
      project_member_user_id:
        type: integer
        description: User ID set as member to relevant project. 
  ServiceBrief:
    type: object
    properties: 
      service_id:
        type: integer
        format: int32
        description: The integer ID of this service.
      service_name:
        type: string
        description: The name of this service.
      project_id:
        type: integer
        format: int32
        description: The project's integer ID which include this service.
      project_name:
        type: string
        description: The project's name which include this service.
      service_owner:
        type: string
        description: The owner name of this service.
      service_creationtime:
        type: string
        description: The creation time of this service.
      service_public:
        type: integer 
        format: int32
        description: The flag to indicate the publicity of the service (1 is public, 0 is non-public).
      service_type:
        type: integer 
        format: int32
        description: The flag to indicate the type of the service (0 is unknown, 1 for normal).        
  ServiceDetail:
    type: object
    properties:
      service_id:
        type: integer
        format: int32
        description: The integer ID of this service.
      service_name:
        type: string
        description: The name of this service.
      service_project_id:  
        type: integer
        format: int32
        description: The project ID of this service belongs to.      
      service_project_name:  
        type: string
        description: The project name of this service belongs to.      
      service_comment:
        type: string
        description: The commnet of this service.
      service_creation_time:
        type: string
        description: The creation time of this service.
      service_update_time:
        type: string
        description: The update time of this service.
      service_deleted:
        type: integer
        format: int32
        description: A deletion mark of the service (1 means it's deleted, 0 is not).
      service_owner_id:
        type: integer
        format: int32
        description: The owner ID of the service always means the creator of the service.
      service_owner_name:
        type: string
        description: The owner name of this service.      
      service_public:
        type: integer
        format: int32
        description: The status of this service.
      service_source:
        type: integer
        format: int32
        description: The creation way type of this service. 
      service_status:
        type: integer
        format: int32
        description: The current service status. 
      service_type:
        type: integer
        format: int32
        description: The service type, 0 Unkonwn, 1 NormalWizard, 2 HelmService.         
      service_config:
        type: string
        description: The service config of this service.                 
  ServiceProject:
    type: object
    properties:
      project_id:
        type: integer
        format: int32
        description: The project's integer ID of this service.    
      project_name:
        type: string
        description: The project's name of this service.
  ServiceToggle:
    type: object
    properties:
      service_toggle:
        type: integer
        format: int32
        description: The new toggle value, 1 for run 0 for stop.
  ServiceScale:
    type: object
    properties:
      service_scale:
        type: integer
        format: int32
        description: The new replica number of the service.   
  ServiceLocate:
    type: object
    properties:
      node_selector:
        type: string
        description: The node selector for location of the service.       
  ServiceScaleStatus:
    type: object
    properties:
      desired_instance:
        type: integer
        format: int32
        description: The desired replica number of the service.       
      available_instance:
        type: integer
        format: int32
        description: The available running replica number of the service. 
  ServicePublicityUpdate:
    type: object
    properties:
      service_public: 
        type: integer
        description: 1-public, 0-not.
  ServiceConfig:
    type: object
    properties:
      service_id:
        type: integer
        format: int32
        description: The integer ID of this service.
      project_id:
        type: integer
        format: int32
        description: The project's integer ID which include this service.
      project_name:
        type: string
        description: The project's name of this service.
      config_phase:
        type: string
        description: The phase name of the service configuration process.        
      deployment_yaml:
        description: The deployment yaml struct of this service configuration.
        $ref: '#/definitions/DeploymentYaml'
      service_yaml:
        description: The service yaml struct of this service configuration.
        $ref: '#/definitions/ServiceYaml'
  ServiceConfig2:
    type: object
    properties:
      projectinfo:
        $ref: '#/definitions/ProjectInformation'      
      deployment_yaml:
        description: The deployment yaml struct of this service configuration.
        $ref: '#/definitions/DeploymentYaml2'
      service_yaml:
        description: The service yaml struct of this service configuration.
        $ref: '#/definitions/ServiceYaml2'
  ProjectInformation:
    type: object
    properties:
      service_id:
        type: integer
        format: int32
        description: The integer ID of this service.
      project_id:
        type: integer
        format: int32
        description: The project's integer ID which include this service.
      project_name:
        type: string
        description: The project's name of this service.
      namespace:
        type: string
        description: The project's name of this service.
      comment:
        type: string
        description: The project's name of this service.
      config_phase:
        type: string
        description: The phase name of the service configuration process.   
      service_externalpath:
        type: array
        items:
          type: string
  ServiceYaml2:
    type: object
    properties:
      kind:
        type: string
        description: "comment"
      apiVersion:
        type: string
        description: "comment"
      metadata:
        description: "comment"
        $ref: '#/definitions/Metadate3'
      spec:
        description: "comment"
        $ref: '#/definitions/Spec3'  
  Spec3:
    type: object
    properties:
      type:
        type: string
      ports:
        type: array
        items:
          $ref: '#/definitions/port3'
      selector:
        type: object
        additionalProperties:
           type: string
  port3:
    type: object
    properties:  
      port:
        type: integer
        format: int32
      nodePort:
        type: integer
        format: int32
  Metadate3:
    type: object
    properties:
      name:
        type: string 
      labels:
        type: object
        additionalProperties:
           type: string     
  DeploymentYaml2:
    type: object
    properties:
      kind:
        type: string
        description: "comment"
      apiVersion:
        type: string
        description: "comment"
      metadata:
        description: "comment"
        $ref: '#/definitions/Metadate'
      spec:
        description: "comment"
        $ref: '#/definitions/Spec'
  Spec:
    type: object
    properties:
      replicas:
        type: integer
        format: int32
      selector:
        type: object
        additionalProperties:
           type: string
      template:
        $ref: '#/definitions/Template'
  Metadate2:
    type: object
    properties:
      labels:
        type: object
        additionalProperties:
           type: string
      namespace:
        type: string

  Template:
    type: object
    properties:
      metadata:
        $ref: '#/definitions/Metadate2'
      spec:
        $ref: '#/definitions/Spec2'
  Spec2:
    type: object
    properties:
      containers:
        type: array
        items:
          $ref: '#/definitions/Container'
  Container:
    type: object
    properties:
      name:
        type: string
      image:
        type: string
      ports:
        type: array
        items:
          $ref: '#/definitions/ContainerPorts'
      env:
        type: array
        items:
          $ref: '#/definitions/ContainerEnvs'
  ImageList:
    type: object
    properties:
      image_name:
        type: string
      image_tag:
        type: string
      project_name:
        type: string
  ContainerList:
    type: object
    properties:
      name:
        type: string
      working_Dir:
        type: string
      command:
        type: string
      container_port:
        type: array
        items:
          type: integer   
          format: int
      cpu_request:
        type: string
        description: the CPU request of this container   
      mem_request:
        type: string
        description: the memory request of this container
      cpu_limit:
        type: string
        description: the CPU limit of this container
      mem_limit:
        type: string
        description: the Memory limit of this container                               
      volume_mounts:
        type: array
        items:
          $ref: '#/definitions/VolumeMount'      
      image:
        $ref: '#/definitions/ImageList'       
      env:
        type: array
        items:
          $ref: '#/definitions/EnvStruct' 
  EnvStruct:
    type: object
    properties:
      dockerfile_envname:
        type: string
      dockerfile_envvalue:
        type: string   
      configmap_key:
        type: string
      configmap_name:
        type: string          
  ExternalService:
    type: object
    properties:
      container_name:
        type: string
      node_config:
        type: object
        properties:
          target_port:
            type: integer   
            format: int
          node_port:
            type: integer   
            format: int 
      load_balancer_config:
        type: object
        properties:
          external_access:
            type: string
  EntireService:
    type: object
    properties:
      project_id:
        type: integer   
        format: int64
      service_id:
        type: integer   
        format: int64
      instance:
        type: integer   
        format: int
      service_name:
        type: string
      service_type:
        type: integer   
        format: int32   
        description: The service type, 0 Unkonwn, 1 NormalWizard, 2 HelmService, 5 StatefulSet.      
      service_public:
        type: integer   
        format: int32
      cluster_ip:
        type: string        
      node_selector:
        type: string
      image_list:
        type: array
        items:
            $ref: '#/definitions/ImageList'
      container_list:
        type: array
        items:
            $ref: '#/definitions/ContainerList'
      initcontainer_list:
        type: array
        items:
            $ref: '#/definitions/ContainerList'            
      external_service_list:
        type: array
        items:
            $ref: '#/definitions/ExternalService' 
      affinity_list:
        type: array
        items:
            $ref: '#/definitions/AffinityList' 
  AffinityList:
    type: object  
    properties:
      anti_flag:  
        type: integer
      service_names:
        type: array
        items:
          type: string   
  ContainerEnvs:
    type: object
    properties:
      name:
        type: string
      value:
        type: string      
  ContainerPorts:
    type: object
    properties:
      containerPort:
        type: integer        
  Metadate:
    type: object
    properties:
      name:
        type: string
  VolumeMount:      
    type: object
    properties:
      volume_type:
        type: string  
      volume_name:
        type: string  
      container_path:
        type: string  
      container_file:
        type: string  
      container_path_flag:
        type: integer  
      target_storage_service:
        type: string  
      target_path:
        type: string  
      target_file:
        type: string  
      target_pvc:
        type: string                                                  
  DeploymentYaml:
    type: object
    properties:
      deployment_name:
        type: string
        description: The deployment name of the service configuration.  
      deployment_replicas:
        type: integer
        format: int32
        description: The replicas number of this deployment.
      volume_list:
        description: The volumes of this deployment.
        type: array
        items:
          $ref: '#/definitions/NFSVolume'        
      container_list:
        description: The containers of this deployment.
        type: array
        items:
          $ref: '#/definitions/ContainerYaml'
  ContainerYaml: 
    type: object
    properties:
      container_name:
        type: string
        description: The container name in the deployment. 
      container_baseimage:
        type: string
        description: The base image name of this container. 
      container_workdir:
        type: string
        description: The working directory of this container. 
      container_ports:
        description: The container ports of this container.
        type: array
        items:
          type: integer   
          format: int32
          description: The port number of this container.
      container_volumes:
        description: The volume mounts of this container.
        type: array
        items:
          $ref: '#/definitions/ContainerVolume'
      container_envs:
        description: The environment variables of this container.
        type: array
        items:
          $ref: '#/definitions/ContainerEnv'
      container_command:
        type: array
        items:
          type: string
          description: The commander of this container.   
      container_memory:
        type: string
        description: The memory request of this container.      
      container_cpu:
        type: string
        description: The CPU request of this container.  
  NFSVolume:
    type: object
    properties:
      volume_name:
        type: string
        description: The volume name in the deployment.     
      server_name:
        type: string
        description: The NFS server name in the deployment.
      volume_path:
        type: string
        description: The NFS path in the deployment.
  ContainerVolume:
    type: object
    properties:
      container_dir:
        type: string
        description: The directory in this container.     
      target_storagename:
        type: string
        description: The storage server name.
      target_dir:
        type: string
        description: The target directory of storage server.
  ContainerEnv:
    type: object
    properties:
      env_name:
        type: string
        description: The environment variable name in this container.     
      env_value:
        type: string
        description: The environment variable value in this container.
  ServiceNodeport:
    type: object
    properties:
      container_port:
        type: integer   
        format: int32
        description: The service port number of this Nodeport.
      node_port:
        type: integer   
        format: int32
        description: The node port number of this Nodeport.
  ServiceExternalpath:
    type: object
    properties:
      container_port:
        type: integer   
        format: int32
        description: The service port number of this Nodeport.
      external_path:
        type: string   
        description: The external access path of this service.        
  ServiceYaml:
    type: object
    properties:
      service_name:
        type: string
        description: The service name of the service configuration. 
      service_nodeports:
        description: The nodeports of this service.
        type: array
        items:
          $ref: '#/definitions/ServiceNodeport'
      service_externalpaths:
        description: The external access paths of this service.
        type: array
        items:
          $ref: '#/definitions/ServiceExternalpath'
      service_selectors:
        description: The selectors of this service.
        type: array
        items:
          type: string
          description: The selector of this service.
  PodBrief:
    type: object
    properties:
      pod_id:
        type: integer
        format: int32
        description: The integer ID of this pod.
      pod_name:
        type: string
        description: The name of this pod.
      pod_instance:
        type: integer
        format: int32
        description: The instance number of this pod. 
  ImageBrief:
    type: object
    properties:
      image_name:
        type: string
        description: The name of this image.
      image_comment:
        type: string
        description: The description of this image.
      image_deleted:
        type: integer
        format: int32
        description: A deletion mark of this image (1 means it's deleted, 0 is not).
  ImageDetail:
    type: object
    properties:
      image_name:
        type: string
        description: The name of this image.
      image_tag:
        type: string
        description: The tag of this image.
      image_author:
        type: string
        description: The author of this image.
      image_id:
        type: string
        description: The integer ID of this pod.
      image_creationtime:
        type: string
        description: The creation time of this image.
      image_size_number:
        type: integer
        format: int32
        description: The image size number.
      image_size_unit:
        type: string
        description: The image size unit.    
      image_comment:
        type: string
        description: The description of this image.        
      image_detail:
        type: string
        description: The description of the detail info of the image.
  DockerfileCopy:
    type: object
    properties:
      dockerfile_copyfrom:
        type: string
        description: The source of copy
      dockerfile_copyto:
        type: string
        description: The destination of copy
  DockerfileENV:
    type: object
    properties:
      dockerfile_envname:
        type: string
        description: The name of this env
      dockerfile_envvalue:
        type: string
        description: The value of this env name
  ImageDockerfile:
    type: object
    properties:
      image_base:
        type: string
        description: The base image.        
      image_author:
        type: string
        description: The author of this image.
      image_volume:
        type: array
        items: 
          type: string
          description: The volume of this image to expose.
      image_copy:
        type: array
        description: The copy instructions in this image
        items:
            $ref: '#/definitions/DockerfileCopy'
      image_run:
        type: array
        items:
          type: string
          description: The directive when building this image.
      image_env:
        type: array
        description: The ENV in this image
        items:
            $ref: '#/definitions/DockerfileENV'
      image_expose:
        type: array
        items: 
          type: string
          description: The port number to expose for this image.
      image_entrypoint:
        type: string
        description: The entrypoint of this image.
      image_cmd:
        type: string
        description: The author of this image.
  ImageConfig:
    type: object
    properties:
      image_name:
        type: string
        description: The name of this image.
      image_tag:
        type: string
        description: The tag of this image.
      project_name:
        type: string
        description: The name of the project that this image belongs to.      
      image_template:
        type: string
        description: The image dockerfile template of this image.
      image_dockerfile:        
        description: The dockerfile of this image configuration.
        $ref: '#/definitions/ImageDockerfile'
  ImageExternalfile:
    type: object
    properties:
      image_externalfilename:
        type: string
        description: The full name of the external file.
      project_name:
        type: string
        description: The name of the project that this image belongs to.    
      image_tag:
        type: string
        description: The tag of this image.
  ImageIndex:
    type: object
    properties:
      project_name:
        type: string
        description: The name of the project that this image belongs to.    
      image_name:
        type: string
        description: The name of this image. 
      image_tag:
        type: string
        description: The tag of this image.    
  NodeBrief:
    type: object
    properties:
      node_id:
        type: integer
        format: int32
        description: The integer ID of this node.      
      node_name:
        type: string
        description: The name of this node.
      node_ip:
        type: string
        description: The IP address of this node.
      node_powerswitch:        
        type: integer
        format: int32
        description: The running status of the node, 0 poweroff, 1 running.
  NodeDetail:
    type: object
    description: The detail information of this node. 
    properties:
      node_id:
        type: integer
        format: int32
        description: The integer ID of this node.      
      node_name:
        type: string
        description: The name of this node.
      node_ip:
        type: string
        description: The IP address of this node.
      node_runningstatus:        
        type: integer
        format: int32
        description: The running status of this node, 0 poweroff, 1 running.
      node_rootpassword:
        type: string
        description: The node's root password.
      node_resource_usage:
        description: The resources usage of this node.
        type: array
        items:
          $ref: '#/definitions/ResourcesUsage'
      node_container_count:
        type: integer
        format: int32
        description: The number of containers in this node.
      node_description:
        type: string
        description: A simple descrition for this node.
  NodePropertyUpdate:
    type: object
    properties:
      node_name:
        type: string
        description: The name of the node.
      node_ip:
        type: string
        description: The IP address of the node.      
      node_rootpassword:
        type: string
        description: The node's root password.
      node_description:
        type: string
        description: A simple descrition for this node.
  NodeRunningstatusUpdate:
    type: object
    properties:
      node_powerswitch:        
        type: integer
        format: int32
        description: The running status of the node, 0 poweroff, 1 running.
  NodeGroup:
    type: object
    properties:
      nodegroup_id:
        type: integer
        format: int32
        description: The integer ID of this node group. 
      nodegroup_name:
        type: string
        description: The name of the node group.
      nodegroup_comment:
        type: string
        description: The description of this node group.    
      nodegroup_project:
        type: string
        description: The dedicated project of this group.    
  ResourcesUsage:
    type: object
    properties:
      cpu_usage:
        type: string
        description: The usage information of cpu.
      mem_usage:
        type: string
        description: The memory capability count number.
      mem_size:
        type: string
        description: The memory unit of measurement.
      storage_total:
        type: string
        description: Storage usage information, division by different volume.
      storage_use:
        type: string
        description: Storage usage information, division by different volume.
      timestamp:
        type: string
        description: The timestamp for resource usage recording.        
  CPUUsageInfo:
    type: object
    properties:
      cpu_id:
        type: integer
        format: int32
        description: The integer ID of this cpu.
      cpu_type:
        type: string
        description: The type of this cpu.
      cpu_initial_number:
        type: integer
        format: int32
        description: The cpu capability count number.
      cpu_usage_number:
        type: integer
        format: int32
        description: The cpu utilization count number.
      cpu_size_unit:
        type: string
        description: The cpu unit of measurement.
  StorageUsageInfo:
    type: object
    description: The usage information of storage. 
    properties:
      storage_id:
        type: integer
        format: int32
        description: The integer ID of this storage.
      storage_name:
        type: string
        description: The name of this storage.
      storage_initial_number:
        type: integer
        format: int32
        description: The storage capability count number.
      storage_usage_number:
        type: integer
        format: int32
        description: The storage utilization count number.
      storage_size_unit:
        type: string
        description: The storage unit of measurement.
      storage_timestamp:
        type: string
        description: The timestamp for the storage usage recording.
  ProfileDetail:
    type: object
    description: The profile for Board system.
    properties:
      profile_description:
        type: string
        description: A summary for this Board system.     
      profile_boardversion:
        type: string
        description: The Board version number.
      profile_kubernetes:
        type: string
        description: The Kubernetes version number in Board.
      profile_mail:
        type: string
        description: The contact mail alias for Board system.
  System:
    type: object
    properties:
      host_setting:
        description: Host info for setting.
        $ref: '#/definitions/HostInfo'
      admin_setting:
        description: Admin account info for settting.
        $ref: '#/definitions/AdminAccount'
      email_setting:
        description: Email Server info for setting.
        $ref: '#/definitions/EmailServer'
  HostInfo:
    type: object
    properties:
      host_name:
        type: string
        description: The name of this host.
      self_registration:
        type: integer        
        format: int32
        description: Self registration, 0 no, 1 yes.
  AdminAccount:
    type: object
    properties:
      admin_email:
        type: string
        description: The email address of admin.
      admin_password:
        type: string
        description: The password of admin.
      admin_passwordconfirm:
        type: string
        description: The password of admin to confirm.
  EmailServer:
    type: object
    properties:
      email_servername:
        type: string
        description: The email server name.
      email_serverport:
        type: integer
        format: int32
        description: The port number for email in this server.
      email_username:
        type: string
        description: The email username.
      email_password:
        type: string
        description: The email password.
      email_form:
        type: string
        description: The email form.
      email_ssl:
        type: integer
        format: int32
        description: The email securiy mode, 0 not SSL, 1 is SSL. 
  DashboardService:
    type: object
    properties:
      service_name:
        type: string
        description: The name of this service, 'total' is for the sum all services.
      is_over_min_limit:
        type: boolean
        format: boolean
      is_over_max_limit:
        type: boolean
        format: boolean
      service_time_unit:
        type: string
        description: The time unit of service status logs, minute, hour, day, month.
      service_time_count:
         type: integer
         format: int32
         description: The number of the service log based on time unit.
      service_statuslogs:
        type: array
        description: The service status logs based on service_timeunit, count is array length.
        items:
          $ref: '#/definitions/PodContainerStatus'
          description: The pod and container number in this service.
  PodContainerStatus:
    type: object
    properties:
      pod_number:
        type: integer
        format: int32
        description: The pod number in this service.
      container_number:
        type: integer
        format: int32
        description: The container number in this service.
      timestamp:
        type: integer
        format: int32
  DashboardNode:
    type: object
    properties:
      node_name:
        type: string
        description: The name of this node, 'total' is for the sum all nodes.
      is_over_min_limit:
        type: boolean
        format: boolean
      is_over_max_limit:
        type: boolean
        format: boolean
      time_unit:
        type: string
        description: The time unit of node status logs, minute, hour, day, month.     
      node_count:
        type: integer
        format: int32
        description: The number of the node logs based on time unit.   
      node_logs_data:
        type: array
        description: The node status logs based on node_timeunit, count is array length.
        items:
          $ref: '#/definitions/DashboardNodeLogs'
      node_list_data:
         type: array
         description: The node status logs based on node_timeunit, count is array length.
         items:
            $ref: '#/definitions/DashboardNodeList'
  DashboardNodeLogs:
      type: object
      properties:
        timestamp:
          type: integer
          format: int32
        cpu_usage:
          type: number
          format: float
        memory_usage:
          type: number
          format: float
        storage_total:
          type: number
          format: float
        storage_use:
          type: number
          format: float
  DashboardStorage:
    type: object
    properties:
      storage_name:
        type: string
        description: The name of this storage, 'total' is for the sum all storages.
      storage_timeunit:
        type: string
        description: The time unit of node status logs, minute, hour, day, month.        
      stoarge_count:
        type: integer
        format: int32
        description: The number of the storage logs based on time unit. 
      storage_statuslogs:
        type: array
        description: The storage status logs based on storage_timeunit, count is array length.
        items:
          $ref: '#/definitions/StorageUsageInfo'    
  TimeStruct:
    type: object
    properties:
      time_unit:
        type: string
        description: The time unit for status logs, minute, hour, day, month.    
      time_count:
        type: string
        description: The number of the status logs based on timeunit.
      timestamp_base:
        type: string
        description: The base timestamp for record checking.
  ServiceDashboardReq:
      type: object
      properties:
        service_time_unit:
          type: string
          description: The time unit for status logs, minute, hour, day, month.
        service_time_count:
          type: integer
          format: int32
          description: The number of the status logs based on timeunit.
        service_timestamp:
          type: integer
          format: int32
          description: The base timestamp for record checking.
  NodeDashboardReq:
        type: object
        properties:
          node_time_unit:
            type: string
            description: The time unit for status logs, minute, hour, day, month.
          node_time_count:
            type: integer
            format: int32
            description: The number of the status logs based on timeunit.
          node_timestamp:
            type: integer
            format: int32
            description: The base timestamp for record checking.
  Token:
    type: object
    description: The token for Board system.
    properties:
      token:
        type: string
        description: The JWT format token.
  DashboardServiceList:
    type: object
    properties:
       service_name:
          type: string
       timestamp:
          type: integer
          format: int32
  DashboardNodeList:
    type: object
    properties:
      node_name:
        type: string
      timestamp:
         type: integer
         format: int32
  InitObject:
    type: object
    properties:
      target:
        type: string
      service_id:
        type: integer
        format: int32
      project_name:
        type: string
  PushObject:
    type: object
    properties:
      items:
        type: array
        items:
          type: string
      message:
        type: string
      job_name:
        type: string
      value:
        type: string
      file_name:
        type: string
      extras:
        type: string
  FileUploadObject:
    type: object
    properties:
      project_name:
        type: string
      service_id:
        type: integer
        format: int32
      image_name:
        type: string
      tag_name:
        type: string
  FileInfoObject:
    type: object
    properties:
      path:
        type: string
      file_name:
        type: string
      size:
        type: integer
        format: int32
  SystemInfo:
    type: object
    properties:
      board_host:
        type: string
      auth_mode:
        type: string
      set_auth_password:
        type: string
      init_project_repo:
        type: string
      sync_k8s:
        type: string
      redirection_url:
        type: string
      board_version:
        type: string
      dns_suffix:
        type: string
      kubernetes_version:
        type: string
      processor_type:
        type: string
  KubernetesInfo:
    type: object
    properties:
      major:
        type: string
      minor:
        type: string
      git_version:
        type: string
      git_commit:
        type: string
      git_tree_state:
        type: string
      build_date:
        type: string
      go_version:
        type: string
      compiler:
        type: string
      platform:
        type: string
  EmailServerSetting:
    type: object
    properties:
      email_from:
        type: string
        description: The sender name for Email notification.
      email_host:
        type: string
        description: The hostname of SMTP server that sends Email notification.
      email_port:
        type: integer
        description: The port of SMTP server.
      email_identity:
        type: string
        description: By default it's empty so the email_username is picked.
      email_username:
        type: string
        description: The username for authenticate against SMTP server.
      email_ssl:
        type: boolean
        description: >-
          When it's set to true the system will access Email server via TLS by
          default.  If it's set to false, it still will handle "STARTTLS" from
          server side.
  Operation:
    type: object
    properties:
      operation_id:
        type: integer
        format: int32
        description: The integer ID of this operation.
      operation_creation_time:
        type: string
        description: The creation time of the operation.
      operation_update_time:
        type: string
        description: The update time of the operation.
      operation_deleted:
        type: integer
        format: int32
        description: A deletion mark of the operation (1 means it's deleted, 0 is not).
      operation_user_id:
        type: integer
        format: int32
        description: The user ID of the project always means the creator of the project.
      operation_user_name:
        type: string
        description: The user name of the project.
      operation_project_name:
        type: string
        description: The user name of the project.
      operation_project_id:
        type: integer
        format: int32
        description: The user ID of the project always means the creator of the project.
      operation_tag:
        type: string
        description: The operation tag to mark the operation priorty.
      operation_comment:
        type: string
        description: The admin comment or ranking for this operation.
      operation_object_type:
        type: string
        description: The operated object for this operation record.
      operation_object_name:
        type: string
        description: The operated object name for this operation record.
      operation_action:
        type: string
        description: The operation action for this operated object.
      operation_status:
        type: string
        description: The operation status for this operated object.        
      operation_path:
        type: string
        description: The operation path for this operated object.     
  HPA:
    type: object
    properties:
      hpa_id:
        type: integer
        format: int32
        description: The hpa ID of this autoscale.     
      hpa_name:
        type: string
        description: The hpa name of this autoscale.         
      service_id:
        type: integer   
        format: int32   
        description: The service ID of this hpa to control. 
      min_pod:
        type: integer   
        format: int32   
        description: The minimum pod number.  
      max_pod:
        type: integer   
        format: int32   
        description: The maximum pod number.   
      cpu_percent:
        type: integer   
        format: int32   
        description: The target CPU percentage. 
      hpa_status:
        type: integer   
        format: int32   
        description: The status of this HPA item.        
  NodeAvailableResources:              
    type: object
    properties:
      node_id:
        type: integer
        format: int32
        description: The node ID.     
      node_name:
        type: string
        description: The node name.
      cpu_available:
        type: string
        description: The max available CPU resource of this node.       
      mem_available:
        type: string
        description: The max available Memory resource of this node.    
      storage_available:
        type: string
        description: The max available Storage resource of this node.      
  HPADetail:                          
    type: object
    properties:
      hpa_id:
        type: integer
        format: int32
        description: The hpa ID of this autoscale.     
      hpa_name:
        type: string
        description: The hpa name of this autoscale.         
      service_id:
        type: integer   
        format: int32   
        description: The service ID of this hpa to control. 
      min_pod:
        type: integer   
        format: int32   
        description: The minimum pod number.  
      max_pod:
        type: integer   
        format: int32   
        description: The maximum pod number.   
      cpu_percent:
        type: integer   
        format: int32   
        description: The target CPU percentage. 
      current_replicas:
        type: integer   
        format: int32   
        description: The current pod number.      
      desired_replicas:
        type: integer   
        format: int32   
        description: The desired pod number.   
      current_cpu:
        type: integer   
        format: int32   
        description: The current CPU percentage. 
  PersistentVolume:                          
    type: object
    properties:
      pv_id:
        type: integer
        format: int32
        description: The ID of this persitent volume.     
      pv_name:
        type: string
        description: The name of this persitent volume.         
      pv_type:
        type: integer   
        format: int32   
        description: The source type of this persitent volume, nfs 1, cephrbd 2.      
      pv_state:
        type: integer   
        format: int32   
        description: The current state of this persitent volume.        
      pv_capacity:
        type: string
        description: The capacity MB of this persitent volume.   
      pv_accessmode: 
        type: string
        description: The access mode of this persitent volume, ReadWriteOnce, ReadOnlyMany, ReadWriteMany.  
      pv_class: 
        type: string
        description: The class of this persitent volume.    
      pv_readonly: 
        type: boolean
        description: The readonly value of this persitent volume, default false.           
      pv_reclaim:
        type: string
        description: The reclaim policy of this persitent volume, Retain, Recycle, Delete.   
      pv_options:        
        description: The option of this persitent volume.
        $ref: '#/definitions/PersistentVolumeOptions'   
  PersistentVolumeOptions:                          
    type: object
    properties:       
      path:
        type: string
        description: The stoarge path of this persitent volume.   
      server:
        type: string
        description: The storage server of this persitent volume.     
  PersistentVolumeOptionsCephRBD:                          
    type: object
    properties:       
      user:
        type: string
        description: The stoarge user of this CephRBD persitent volume.   
      keyring:
        type: string
        description: The key ring of this CephRBD persitent volume.        
      pool:
        type: string
        description: The pool of this CephRBD persitent volume.   
      image:  
        type: string
        description: The image of this CephRBD persitent volume.     
      fstype: 
        type: string
        description: The fiel system type of this CephRBD persitent volume.   
      secretname:  
        type: string
        description: The secretname of this CephRBD persitent volume.  
      secretnamespace:  
        type: string
        description: The secret namespace of this CephRBD persitent volume.   
      monitors:                                            
        type: string
        description: The monitors of this CephRBD persitent volume, split by comma.  
  PersistentVolumeClaim:                          
    type: object
    properties:
      pvc_id:
        type: integer
        format: int32
        description: The ID of this persitent volume claim.     
      pvc_name:
        type: string
        description: The name of this persitent volume claim.     
      pvc_projectid:
        type: integer
        format: int32
        description: The project ID of this persitent volume claim belongs to.      
      pvc_projectname: 
        type: string
        description: The project name of this persitent volume claim belongs to.                                  
      pvc_capacity:
        type: string
        description: The capacity MB of this persitent volume claim.   
      pvc_accessmode: 
        type: string
        description: The access mode of this persitent volume claim, ReadWriteOnce, ReadOnlyMany, ReadWriteMany.  
      pvc_class: 
        type: string
        description: The class of this persitent volume claim.             
      pvc_designatedpv:
        type: string
        description: The designated pv name of this persitent volume claim.      
      pvc_state:
        type: integer
        format: int32
        description: The current state of this persitent volume claim.          
  PersistentVolumeClaimDetail:                          
    type: object
    properties:
      pvclaim:        
        description: The option of this persitent volume claim.
        $ref: '#/definitions/PersistentVolumeClaim'        
      pvc_state:
        type: integer
        format: int32
        description: The current state of this persitent volume claim.    
      pvc_volume:
        type: string
        description: The current volume of this persitent volume claim.  
      pvc_events:
        type: array
        description: The events of this persitent volume claim. 
        items:
          type: string       
  ConfigMap:
    type: object
    properties:    
      namespace: 
        type: string
        description: The project name of this ConfigMap belongs to. 
      name:
        type: string
        description: The ConfigMap name.
      datalist:        
        description: The data pair list of this ConfigMap.
        type: object
        additionalProperties: 
          type: string        
  HelmRepository:                          
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: The ID of this repository.     
      name:
        type: string
        description: The name of this repository.         
      url:
        type: string      
        description: The url location of this repository.
      type:
        type: integer
        format: int32
        description: The type of this repository.    
  HelmRepositoryDetail:                          
    type: object
    allOf:
    - $ref: '#/definitions/HelmRepository'
    - type: object
      properties:
        charts:
          type: array
          items:
            $ref: '#/definitions/ChartVersions'
  PaginatedHelmRepositoryDetail:                          
    type: object
    allOf:
    - $ref: '#/definitions/HelmRepository'
    - $ref: '#/definitions/PaginatedChartVersions'
  PaginatedChartVersions:                          
    type: object
    allOf:
    - $ref: '#/definitions/Pagination'
    - type: object
      properties:
        charts:
          type: array
          items:
            $ref: '#/definitions/ChartVersions'
  ChartVersions:
    type: object
    properties:
      name:
        type: string
        description: The chart name of chart versions.
      versions:
        type: array
        items:
          $ref: '#/definitions/ChartVersion'
  ChartVersion:
    type: object
    allOf:
    - $ref: '#/definitions/ChartMetadata'
    - type: object
      properties:
        urls:
          type: array
          items:
            type: string
          description: the urls of this chart.
        digest:
          type: string
          description: the digest of this chart.
  ChartMetadata:
    type: object
    properties:
      name:
        type: string
        description: The name of this chart.
      sources:
        type: array
        items:
          type: string
        description: The sources of this chart.
      version:
        type: string
        description: The version of this chart.
      kubeVersion:
        type: string
        description: The kubernetes version of this chart supported.
      description:
        type: string
        description: the description of this chart.
      keywords:
        type: array
        items:
          type: string
        description: the keywords of this chart.
      icon:
        type: string
        description: the icon of this chart.
  Chart:
    type: object
    allOf:
    - $ref: '#/definitions/ChartMetadata'
    - type: object
      properties:
        tempates:
          type: array
          items:
            $ref: '#/definitions/File'
        values:
          type: string
          description: The values content of this chart.
        files:
          type: array
          items:
            $ref: '#/definitions/File'
  File:
    type: object
    properties:
      name:
        type: string
        description: The name of this file.
      contents:
        type: string
        description: The contents of this file.
  Release:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: The ID of this release.
      name:
        type: string
        description: The name of this release.
      project_id:
        type: integer
        format: int32
        description: The project's integer ID which include this release.   
      project_name:
        type: string
        description: The project's name which include this release.  
      repository_id:
        type: integer
        format: int32
        description: The Repository ID of this release.    
      repository:
        type: string
        description: The Repository's name of this release.  
      chart:
        type: string
        description: The Repository Chart of this release. 
      chartversion:
        type: string
        description: The Repository ChartVersion of this release. 
      owner_id:
        type: integer
        format: int32
        description: The owner id of this release.
      owner_name:
        type: string
        description: The owner name of this release.
      status:
        type: string
        description: The status of this release.
      values:
        type: string
        description: The values of this release uses. 
      update_time:
        type: string
        description: The last update time of this release.
      creation_time:
        type: string
        description: The creation time of this release.
  ReleaseDetail:
    type: object
    allOf:
    - $ref: '#/definitions/Release'
    - type: object
      properties:
        notes:
          type: string
          description: The usage of this release.
        workloads:
          type: string
          description: The work loads of this release.
        workloadstatus:
          type: string
          description: The work loads status of this release.
  Pagination:
    type: object
    properties:
      page_index:
        type: integer
        format: int32
        description: The index of the page
      page_size:
        type: integer
        format: int32
        description: The size of the page
      total_count:
        type: integer
        format: int64
        description: The total count of all pages
      page_count:
        type: integer
        format: int32
        description: The count of the pages
  JobConfig:
    type: object
    properties:
      project_id:
        type: integer   
        format: int64
      project_name:
        type: string
      job_id:
        type: integer   
        format: int64
      job_name:
        type: string
      node_selector:
        type: string
      container_list:
        type: array
        items:
            $ref: '#/definitions/ContainerList'
      affinity_list:
        type: array
        items:
            $ref: '#/definitions/JobAffinity' 
      parallelism:
        type: integer
        format: int32
      completions:
        type: integer
        format: int32
      active_Deadline_Seconds:
        type: integer
        format: int32
      backoff_Limit:
        type: integer
        format: int32
  JobDetail:
    type: object
    properties:
      job_id:
        type: integer
        format: int32
        description: The integer ID of this job.
      job_name:
        type: string
        description: The name of this job.
      job_project_id:  
        type: integer
        format: int32
        description: The project ID of this job belongs to.      
      job_project_name:  
        type: string
        description: The project name of this job belongs to.      
      job_comment:
        type: string
        description: The commnet of this job.
      job_creation_time:
        type: string
        description: The creation time of this job.
      job_update_time:
        type: string
        description: The update time of this job.
      job_deleted:
        type: integer
        format: int32
        description: A deletion mark of the job (1 means it's deleted, 0 is not).
      job_owner_id:
        type: integer
        format: int32
        description: The owner ID of the job always means the creator of the job.
      job_owner_name:
        type: string
        description: The owner name of this job.      
      job_source:
        type: integer
        format: int32
        description: The creation way type of this job. 
      job_status:
        type: integer
        format: int32
        description: The current job status. 
      job_yaml:
        type: string
        description: The job config of this job.
  Pod:
    type: object
    properties:
      name:
        type: string
        description: The name of this pod.
      project_name:
        type: string
        description: The project name of this pod belongs.
      spec:
        description: The specification of this pod.
        $ref: '#/definitions/Spec2'
  JobAffinity:
    type: object  
    properties:
      anti_flag:  
        type: integer
      job_names:
        type: array
        items:
          type: string
